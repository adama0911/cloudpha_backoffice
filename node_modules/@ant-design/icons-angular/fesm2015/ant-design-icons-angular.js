import { generate } from 'ant-design-palettes';
import { DOCUMENT, CommonModule } from '@angular/common';
import { HttpClient, HttpBackend } from '@angular/common/http';
import { Optional, Inject, RendererFactory2, Input, ElementRef, Directive, Renderer2, NgModule } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map, share, tap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} message
 * @return {?}
 */
function printErr(message) {
    console.error(`[@ant-design/icons-angular]: ${message}.`);
}
/**
 * @param {?} message
 * @return {?}
 */
function printWarn(message) {
    console.warn(`[@ant-design/icons-angular]: ${message}.`);
}
/**
 * @param {?} primaryColor
 * @return {?}
 */
function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
}
/**
 * @param {?} name
 * @param {?} theme
 * @return {?}
 */
function withSuffix(name, theme) {
    switch (theme) {
        case 'fill':
            return `${name}-fill`;
        case 'outline':
            return `${name}-o`;
        case 'twotone':
            return `${name}-twotone`;
        default:
            throw new TypeError(`Unknown theme type: ${theme}, name: ${name}`);
    }
}
/**
 * @param {?} abbr
 * @return {?}
 */
function mapAbbrToTheme(abbr) {
    return abbr === 'o' ? 'outline' : (/** @type {?} */ (abbr));
}
/**
 * @param {?} name
 * @param {?} theme
 * @param {?} pri
 * @param {?} sec
 * @return {?}
 */
function withSuffixAndColor(name, theme, pri, sec) {
    return `${withSuffix(name, theme)}-${pri}-${sec}`;
}
/**
 * @param {?} target
 * @return {?}
 */
function isIconDefinition(target) {
    return (typeof target === 'object' &&
        typeof target.name === 'string' &&
        typeof target.theme === 'string' &&
        // IconDefinition.icon could be a SVG: We render SVG only once (the first time a icon is used)
        // and return a copy every time after that.
        (target.icon instanceof SVGElement || typeof target.icon === 'string'));
}
/**
 * @param {?} str
 * @return {?}
 */
function getIconDefinitionFromAbbr(str) {
    /** @type {?} */
    const arr = str.split('-');
    /** @type {?} */
    const theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
    /** @type {?} */
    const name = arr.join('-');
    return (/** @type {?} */ ({
        name,
        theme,
        icon: ''
    }));
}
/**
 * @param {?} svg
 * @return {?}
 */
function cloneSVG(svg) {
    return (/** @type {?} */ (svg.cloneNode(true)));
}
/**
 * @param {?} raw
 * @return {?}
 */
function replaceFillColor(raw) {
    return raw
        .replace(/['"]#333['"]/g, '"primaryColor"')
        .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
        .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
        .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IconService {
    /**
     * @param {?} _rendererFactory
     * @param {?} _handler
     * @param {?} _document
     */
    constructor(_rendererFactory, _handler, _document) {
        this._rendererFactory = _rendererFactory;
        this._handler = _handler;
        this._document = _document;
        this.defaultTheme = 'outline';
        /**
         * Register icons.
         */
        this._svgDefinitions = new Map();
        /**
         * Register rendered (with color) SVG icons.
         */
        this._svgCachedDefinitions = new Map();
        /**
         * Default color settings.
         */
        this._twoToneColorPalette = {
            primaryColor: '#333333',
            secondaryColor: '#E6E6E6'
        };
        this._assetsSource = '';
        /**
         * To note whether a request to an icon is under processing.
         */
        this._httpQueue = new Map();
        // For SSR.
        this._renderer = this._rendererFactory.createRenderer(null, null);
        if (this._handler) {
            this._http = new HttpClient(this._handler);
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    set twoToneColor({ primaryColor, secondaryColor }) {
        if (primaryColor && typeof primaryColor === 'string' && typeof secondaryColor === 'string' || typeof secondaryColor === 'undefined') {
            this._twoToneColorPalette.primaryColor = primaryColor;
            this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
        }
    }
    /**
     * @return {?}
     */
    get twoToneColor() {
        return (/** @type {?} */ (Object.assign({}, this.twoToneColor))); // Make a copy to avoid unexpected changes.
    }
    /**
     * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
     * @param {...?} icons
     * @return {?}
     */
    addIcon(...icons) {
        this._addIconLiteral(...icons);
    }
    /**
     * @param {?} prefix
     * @return {?}
     */
    changeAssetsSource(prefix) {
        this._assetsSource = prefix.endsWith('/') ? prefix : prefix + '/';
    }
    /**
     * Register icon.
     * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
     *   icons provided by ant-design should implement IconDefinition both.
     * @return {?}
     */
    _addIconLiteral(...icons) {
        icons.forEach(icon => {
            this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
        });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    _get(key) {
        return this._svgDefinitions.get(key) || null;
    }
    /**
     * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
     * @param {?} url
     * @return {?}
     */
    _getFromRemote(url) {
        if (this._http) {
            /** @type {?} */
            let task = this._httpQueue.get(url);
            /** @type {?} */
            let ob;
            if (task) {
                ob = task.ob;
            }
            else {
                ob = this._createObservableRequest(url);
                task = { ob };
                this._httpQueue.set(url, task);
            }
            return ob;
        }
        else {
            printWarn('You need to import HttpClient module to use dynamic importing');
            return of(null);
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    _createObservableRequest(url) {
        /** @type {?} */
        const icon = getIconDefinitionFromAbbr(url);
        return this._http.get(`${this._assetsSource}assets/${icon.theme}/${icon.name}.svg`, { responseType: 'text' }).pipe(share(), // Use `share` so if multi directives request the same icon, HTTP request would only be fired once.
        tap(() => {
            this._httpQueue.delete(url);
        }), map(svgString => {
            icon.icon = svgString;
            this._addIconLiteral(icon);
            return icon;
        }), catchError(() => {
            printErr(`the icon ${url} does not exist in your assets folder`);
            this._httpQueue.delete(url);
            return of(null);
        }));
    }
    /**
     * Icon component would call this method to get a SVG element.
     * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
     * so we provided a unified interface here.
     *
     * TODO: namespace in the future
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    getRenderedContent(icon, twoToneColor) {
        /** @type {?} */
        const definitionOrNull = isIconDefinition(icon)
            ? (/** @type {?} */ (icon))
            : this._get((/** @type {?} */ (icon)));
        /** @type {?} */
        const $icon = definitionOrNull ? of(definitionOrNull) : this._getFromRemote((/** @type {?} */ (icon)));
        return $icon.pipe(map(i => {
            if (i) {
                return this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
            }
            else {
                printErr(`the icon ${icon} does not exist or is not registered`);
                return null;
            }
        }));
    }
    /**
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    _loadSVGFromCacheOrCreateNew(icon, twoToneColor) {
        /** @type {?} */
        let svg;
        /** @type {?} */
        const pri = twoToneColor || this._twoToneColorPalette.primaryColor;
        /** @type {?} */
        const sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
        /** @type {?} */
        const key = withSuffixAndColor(icon.name, icon.theme, pri, sec);
        /** @type {?} */
        const cached = this._svgCachedDefinitions.get(key);
        // If this icon is used before, there should be a copy in cachedDefinitions, just copy it.
        // Otherwise, generate one from string or SVG element, and cache it.
        if (!cached) {
            svg = this._setSVGAttribute(this._colorizeSVGIcon(typeof icon.icon === 'string'
                ? this._createSVGElementFromString(icon.icon)
                : icon.icon, (icon.theme === 'twotone'), pri, sec));
            this._svgCachedDefinitions.set(key, (/** @type {?} */ (Object.assign({}, icon, { icon: svg }))));
        }
        else {
            svg = cached.icon;
        }
        return cloneSVG(svg);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    _createSVGElementFromString(str) {
        /** @type {?} */
        const colorParsed = replaceFillColor(str);
        /** @type {?} */
        const div = this._document.createElement('div');
        div.innerHTML = colorParsed;
        /** @type {?} */
        const svg = div.querySelector('svg');
        if (!svg) {
            throw Error('<svg> tag not found');
        }
        return svg;
    }
    /**
     * @param {?} svg
     * @return {?}
     */
    _setSVGAttribute(svg) {
        this._renderer.setAttribute(svg, 'width', '1em');
        this._renderer.setAttribute(svg, 'height', '1em');
        return svg;
    }
    /**
     * @param {?} svg
     * @param {?} twotone
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    _colorizeSVGIcon(svg, twotone, pri, sec) {
        if (twotone) {
            /** @type {?} */
            const children = svg.childNodes;
            /** @type {?} */
            const length = children.length;
            for (let i = 0; i < length; i++) {
                /** @type {?} */
                const child = (/** @type {?} */ (children[i]));
                if (child.getAttribute('fill') === 'secondaryColor') {
                    this._renderer.setAttribute(child, 'fill', sec);
                }
                else {
                    this._renderer.setAttribute(child, 'fill', pri);
                }
            }
        }
        this._renderer.setAttribute(svg, 'fill', 'currentColor');
        return svg;
    }
    /**
     * Clear all cached icons.
     * @return {?}
     */
    clear() {
        this._svgDefinitions.clear();
    }
}
IconService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: HttpBackend, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Developers use this component to render an SVG element.
 *
 * For memory usage consideration, this component should be as minimal as possible. IconService would do the most work.
 */
class IconDirective {
    /**
     * @param {?} _iconService
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_iconService, _elementRef, _renderer) {
        this._iconService = _iconService;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    _changeIcon() {
        return new Promise((resolve, reject) => {
            if (this.type) {
                this._iconService.getRenderedContent(this._parseIconType(this.type, this.theme), this.twoToneColor).subscribe(svg => {
                    if (svg) {
                        this._setSVGElement(svg);
                        resolve((/** @type {?} */ (svg)));
                    }
                    else {
                        reject(null);
                    }
                });
            }
            else {
                reject(null);
            }
        });
    }
    /**
     * @param {?} type
     * @param {?} theme
     * @return {?}
     */
    _parseIconType(type, theme) {
        if (isIconDefinition(type)) {
            return type;
        }
        else {
            /** @type {?} */
            const typeTr = (/** @type {?} */ (type));
            if (typeTr.endsWith('-fill') || typeTr.endsWith('-o') || typeTr.endsWith('-twotone')) {
                if (!!theme) {
                    printErr(`'type' ${type} already gets a theme inside so 'theme' ${theme} would be ignored`);
                }
                return type;
            }
            else {
                return withSuffix((/** @type {?} */ (type)), theme || this._iconService.defaultTheme);
            }
        }
    }
    /**
     * @param {?} svg
     * @return {?}
     */
    _setSVGElement(svg) {
        this._clearSVGElement();
        this._renderer.appendChild(this._elementRef.nativeElement, svg);
    }
    /**
     * @return {?}
     */
    _clearSVGElement() {
        /** @type {?} */
        const self = this._elementRef.nativeElement;
        /** @type {?} */
        const children = self.childNodes;
        /** @type {?} */
        const childCount = children.length;
        for (let i = childCount - 1; i >= 0; i--) {
            /** @type {?} */
            const child = (/** @type {?} */ (children[i]));
            if (child.tagName.toLowerCase() === 'svg') {
                this._renderer.removeChild(self, child);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._changeIcon();
    }
}
IconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[antIcon]'
            },] }
];
IconDirective.ctorParameters = () => [
    { type: IconService },
    { type: ElementRef },
    { type: Renderer2 }
];
IconDirective.propDecorators = {
    type: [{ type: Input }],
    theme: [{ type: Input }],
    twoToneColor: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IconModule {
}
IconModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [IconDirective],
                declarations: [IconDirective],
                providers: [IconService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// This icon file is generated by build/generate.ts
// tslint:disable
/** @type {?} */
const manifest = {
    fill: [
        'account-book',
        'alert',
        'alipay-circle',
        'alipay-square',
        'aliwangwang',
        'amazon-circle',
        'amazon-square',
        'api',
        'android',
        'apple',
        'appstore',
        'audio',
        'backward',
        'bank',
        'behance-circle',
        'behance-square',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'camera',
        'calendar',
        'car',
        'caret-down',
        'caret-left',
        'caret-right',
        'caret-up',
        'carry-out',
        'check-circle',
        'check-square',
        'chrome',
        'clock-circle',
        'ci-circle',
        'close-circle',
        'close-square',
        'cloud',
        'code-sandbox-circle',
        'code-sandbox-square',
        'code',
        'codepen-circle',
        'codepen-square',
        'container',
        'contacts',
        'compass',
        'control',
        'copy',
        'credit-card',
        'copyright-circle',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dingtalk-circle',
        'dingtalk-square',
        'dollar-circle',
        'dislike',
        'down-circle',
        'dribbble-circle',
        'down-square',
        'dribbble-square',
        'dropbox-circle',
        'dropbox-square',
        'edit',
        'environment',
        'exclamation-circle',
        'euro-circle',
        'experiment',
        'eye',
        'facebook',
        'fast-backward',
        'fast-forward',
        'file-excel',
        'file-add',
        'file-exclamation',
        'file-image',
        'file-ppt',
        'file-pdf',
        'file-markdown',
        'file-text',
        'file-unknown',
        'file-zip',
        'file-word',
        'file',
        'fire',
        'flag',
        'filter',
        'folder-add',
        'folder-open',
        'forward',
        'folder',
        'frown',
        'fund',
        'funnel-plot',
        'gift',
        'github',
        'gitlab',
        'golden',
        'google-circle',
        'google-plus-circle',
        'google-plus-square',
        'google-square',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'ie-circle',
        'html5',
        'idcard',
        'ie-square',
        'info-circle',
        'instagram',
        'insurance',
        'interation',
        'layout',
        'left-square',
        'left-circle',
        'linkedin',
        'like',
        'lock',
        'mail',
        'medicine-box',
        'medium-square',
        'medium-circle',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'mobile',
        'money-collect',
        'notification',
        'pause-circle',
        'pay-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-square',
        'play-circle',
        'plus-circle',
        'profile',
        'plus-square',
        'pound-circle',
        'printer',
        'project',
        'qq-circle',
        'pushpin',
        'property-safety',
        'qq-square',
        'read',
        'question-circle',
        'reconciliation',
        'red-envelope',
        'reddit-circle',
        'reddit-square',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'shop',
        'setting',
        'shopping',
        'sketch-circle',
        'sketch-square',
        'skype',
        'skin',
        'slack-circle',
        'slack-square',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'step-backward',
        'step-forward',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'taobao-circle',
        'taobao-square',
        'thunderbolt',
        'tool',
        'trademark-circle',
        'trophy',
        'twitter-circle',
        'twitter-square',
        'unlock',
        'up-circle',
        'up-square',
        'usb',
        'video-camera',
        'wallet',
        'warning',
        'wechat',
        'weibo-circle',
        'weibo-square',
        'windows',
        'yahoo',
        'youtube',
        'zhihu-circle',
        'yuque',
        'zhihu-square'
    ],
    outline: [
        'account-book',
        'alert',
        'alipay-circle',
        'aliwangwang',
        'api',
        'android',
        'apple',
        'appstore',
        'audio',
        'backward',
        'bank',
        'behance-square',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'camera',
        'calendar',
        'car',
        'caret-down',
        'caret-left',
        'caret-right',
        'caret-up',
        'carry-out',
        'check-circle',
        'check-square',
        'chrome',
        'clock-circle',
        'close-circle',
        'close-square',
        'cloud',
        'code',
        'codepen-circle',
        'container',
        'contacts',
        'compass',
        'control',
        'copy',
        'credit-card',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dislike',
        'down-circle',
        'down-square',
        'dribbble-square',
        'edit',
        'environment',
        'exclamation-circle',
        'experiment',
        'eye',
        'facebook',
        'fast-backward',
        'fast-forward',
        'file-excel',
        'file-add',
        'file-exclamation',
        'file-image',
        'file-ppt',
        'file-pdf',
        'file-markdown',
        'file-text',
        'file-unknown',
        'file-zip',
        'file-word',
        'file',
        'fire',
        'flag',
        'filter',
        'folder-add',
        'folder-open',
        'forward',
        'folder',
        'frown',
        'fund',
        'funnel-plot',
        'gift',
        'github',
        'gitlab',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'html5',
        'idcard',
        'info-circle',
        'instagram',
        'insurance',
        'interation',
        'layout',
        'left-square',
        'left-circle',
        'linkedin',
        'like',
        'lock',
        'mail',
        'medicine-box',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'mobile',
        'money-collect',
        'notification',
        'pause-circle',
        'pay-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-square',
        'play-circle',
        'plus-circle',
        'profile',
        'plus-square',
        'printer',
        'project',
        'pushpin',
        'property-safety',
        'read',
        'question-circle',
        'reconciliation',
        'red-envelope',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'shop',
        'setting',
        'shopping',
        'skype',
        'skin',
        'slack-square',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'step-backward',
        'step-forward',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'taobao-circle',
        'thunderbolt',
        'tool',
        'trophy',
        'unlock',
        'up-circle',
        'up-square',
        'usb',
        'video-camera',
        'wallet',
        'warning',
        'wechat',
        'weibo-circle',
        'weibo-square',
        'windows',
        'yahoo',
        'youtube',
        'yuque',
        'alibaba',
        'align-center',
        'align-left',
        'align-right',
        'alipay',
        'amazon',
        'aliyun',
        'ant-cloud',
        'ant-design',
        'apartment',
        'area-chart',
        'arrow-down',
        'arrow-left',
        'arrow-right',
        'arrow-up',
        'arrows-alt',
        'audit',
        'bar-chart',
        'barcode',
        'bars',
        'behance',
        'block',
        'bg-colors',
        'bold',
        'border-bottom',
        'border-horizontal',
        'border-inner',
        'border-left',
        'border-outer',
        'border-right',
        'border-verticle',
        'border-top',
        'border',
        'branches',
        'check',
        'ci',
        'cloud-download',
        'close',
        'cloud-server',
        'cloud-sync',
        'cloud-upload',
        'cluster',
        'code-sandbox',
        'codepen',
        'coffee',
        'colum-height',
        'column-width',
        'copyright',
        'dash',
        'deployment-unit',
        'desktop',
        'disconnect',
        'dingding',
        'dollar',
        'double-left',
        'dot-chart',
        'double-right',
        'down',
        'download',
        'drag',
        'dribbble',
        'dropbox',
        'ellipsis',
        'enter',
        'euro',
        'exception',
        'exclamation',
        'export',
        'fall',
        'file-done',
        'file-jpg',
        'file-protect',
        'file-search',
        'file-sync',
        'font-colors',
        'font-size',
        'fork',
        'form',
        'fullscreen-exit',
        'fullscreen',
        'gateway',
        'global',
        'gold',
        'google-plus',
        'google',
        'heat-map',
        'ie',
        'import',
        'inbox',
        'info',
        'italic',
        'issues-close',
        'key',
        'laptop',
        'left',
        'line-chart',
        'line-height',
        'line',
        'link',
        'loading-3-quarters',
        'loading',
        'login',
        'logout',
        'man',
        'medium-workmark',
        'medium',
        'menu-fold',
        'menu',
        'menu-unfold',
        'minus',
        'monitor',
        'mr',
        'number',
        'ordered-list',
        'paper-clip',
        'pause',
        'percentage',
        'pic-center',
        'pic-left',
        'pic-right',
        'plus',
        'pound',
        'poweroff',
        'qq',
        'qrcode',
        'question',
        'radar-chart',
        'radius-bottomleft',
        'radius-bottomright',
        'radius-setting',
        'radius-upleft',
        'radius-upright',
        'reddit',
        'redo',
        'reload-time',
        'reload',
        'retweet',
        'right',
        'rise',
        'robot',
        'rollback',
        'safety',
        'scan',
        'scissor',
        'search',
        'select',
        'shake',
        'share-alt',
        'shopping-cart',
        'shrink',
        'sketch',
        'slack',
        'small-dash',
        'solution',
        'sort-ascending',
        'sort-descending',
        'stock',
        'strikethrough',
        'swap-left',
        'swap-right',
        'swap',
        'sync',
        'table',
        'team',
        'taobao',
        'to-top',
        'trademark',
        'transaction',
        'twitter',
        'underline',
        'undo',
        'unordered-list',
        'up',
        'upload',
        'user-delete',
        'user-add',
        'usergroup-add',
        'user',
        'usergroup-delete',
        'vertical-align-bottom',
        'vertical-align-middle',
        'vertical-align-top',
        'vertical-left',
        'vertical-right',
        'weibo',
        'wifi',
        'woman',
        'zoom-in',
        'zhihu',
        'zoom-out'
    ],
    twotone: [
        'account-book',
        'alert',
        'api',
        'appstore',
        'audio',
        'bank',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'camera',
        'car',
        'carry-out',
        'check-circle',
        'check-square',
        'clock-circle',
        'close-circle',
        'close-square',
        'cloud',
        'code',
        'container',
        'contacts',
        'compass',
        'control',
        'copy',
        'credit-card',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dislike',
        'down-circle',
        'down-square',
        'edit',
        'environment',
        'exclamation-circle',
        'experiment',
        'eye',
        'file-excel',
        'file-add',
        'file-exclamation',
        'file-image',
        'file-ppt',
        'file-pdf',
        'file-markdown',
        'file-text',
        'file-unknown',
        'file-zip',
        'file-word',
        'file',
        'fire',
        'flag',
        'filter',
        'folder-add',
        'folder-open',
        'folder',
        'frown',
        'fund',
        'funnel-plot',
        'gift',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'html5',
        'idcard',
        'info-circle',
        'insurance',
        'interation',
        'layout',
        'left-square',
        'left-circle',
        'like',
        'lock',
        'mail',
        'medicine-box',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'mobile',
        'money-collect',
        'notification',
        'pause-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-square',
        'play-circle',
        'plus-circle',
        'profile',
        'plus-square',
        'pound-circle',
        'printer',
        'project',
        'pushpin',
        'property-safety',
        'question-circle',
        'reconciliation',
        'red-envelope',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'shop',
        'setting',
        'shopping',
        'skin',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'thunderbolt',
        'tool',
        'trademark-circle',
        'trophy',
        'unlock',
        'up-circle',
        'up-square',
        'usb',
        'video-camera',
        'wallet',
        'warning',
        'ci',
        'copyright',
        'dollar',
        'euro',
        'gold',
        'canlendar'
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { IconModule, IconService, IconDirective, printErr, printWarn, getSecondaryColor, withSuffix, withSuffixAndColor, isIconDefinition, getIconDefinitionFromAbbr, cloneSVG, replaceFillColor, manifest };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,