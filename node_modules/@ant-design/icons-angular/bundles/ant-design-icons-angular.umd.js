(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ant-design-palettes'), require('@angular/common'), require('@angular/common/http'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ant-design/icons-angular', ['exports', 'ant-design-palettes', '@angular/common', '@angular/common/http', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['ant-design'] = global['ant-design'] || {}, global['ant-design']['icons-angular'] = {}),global.antDesignPalettes,global.ng.common,global.ng.common.http,global.ng.core,global.rxjs,global.rxjs.operators));
}(this, (function (exports,antDesignPalettes,common,http,core,rxjs,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} message
     * @return {?}
     */
    function printErr(message) {
        console.error("[@ant-design/icons-angular]: " + message + ".");
    }
    /**
     * @param {?} message
     * @return {?}
     */
    function printWarn(message) {
        console.warn("[@ant-design/icons-angular]: " + message + ".");
    }
    /**
     * @param {?} primaryColor
     * @return {?}
     */
    function getSecondaryColor(primaryColor) {
        return antDesignPalettes.generate(primaryColor)[0];
    }
    /**
     * @param {?} name
     * @param {?} theme
     * @return {?}
     */
    function withSuffix(name, theme) {
        switch (theme) {
            case 'fill':
                return name + "-fill";
            case 'outline':
                return name + "-o";
            case 'twotone':
                return name + "-twotone";
            default:
                throw new TypeError("Unknown theme type: " + theme + ", name: " + name);
        }
    }
    /**
     * @param {?} abbr
     * @return {?}
     */
    function mapAbbrToTheme(abbr) {
        return abbr === 'o' ? 'outline' : ((abbr));
    }
    /**
     * @param {?} name
     * @param {?} theme
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    function withSuffixAndColor(name, theme, pri, sec) {
        return withSuffix(name, theme) + "-" + pri + "-" + sec;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    function isIconDefinition(target) {
        return (typeof target === 'object' &&
            typeof target.name === 'string' &&
            typeof target.theme === 'string' &&
            // IconDefinition.icon could be a SVG: We render SVG only once (the first time a icon is used)
            // and return a copy every time after that.
            (target.icon instanceof SVGElement || typeof target.icon === 'string'));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function getIconDefinitionFromAbbr(str) {
        /** @type {?} */
        var arr = str.split('-');
        /** @type {?} */
        var theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
        /** @type {?} */
        var name = arr.join('-');
        return (({
            name: name,
            theme: theme,
            icon: ''
        }));
    }
    /**
     * @param {?} svg
     * @return {?}
     */
    function cloneSVG(svg) {
        return ((svg.cloneNode(true)));
    }
    /**
     * @param {?} raw
     * @return {?}
     */
    function replaceFillColor(raw) {
        return raw
            .replace(/['"]#333['"]/g, '"primaryColor"')
            .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
            .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
            .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var IconService = (function () {
        function IconService(_rendererFactory, _handler, _document) {
            this._rendererFactory = _rendererFactory;
            this._handler = _handler;
            this._document = _document;
            this.defaultTheme = 'outline';
            /**
             * Register icons.
             */
            this._svgDefinitions = new Map();
            /**
             * Register rendered (with color) SVG icons.
             */
            this._svgCachedDefinitions = new Map();
            /**
             * Default color settings.
             */
            this._twoToneColorPalette = {
                primaryColor: '#333333',
                secondaryColor: '#E6E6E6'
            };
            this._assetsSource = '';
            /**
             * To note whether a request to an icon is under processing.
             */
            this._httpQueue = new Map();
            // For SSR.
            this._renderer = this._rendererFactory.createRenderer(null, null);
            if (this._handler) {
                this._http = new http.HttpClient(this._handler);
            }
        }
        Object.defineProperty(IconService.prototype, "twoToneColor", {
            get: /**
             * @return {?}
             */ function () {
                return ((__assign({}, this.twoToneColor))); // Make a copy to avoid unexpected changes.
            },
            set: /**
             * @param {?} __0
             * @return {?}
             */ function (_a) {
                var primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
                if (primaryColor && typeof primaryColor === 'string' && typeof secondaryColor === 'string' || typeof secondaryColor === 'undefined') {
                    this._twoToneColorPalette.primaryColor = primaryColor;
                    this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param icons
         */
        /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param {...?} icons
         * @return {?}
         */
        IconService.prototype.addIcon = /**
         * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
         * @param {...?} icons
         * @return {?}
         */
            function () {
                var icons = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    icons[_i] = arguments[_i];
                }
                this._addIconLiteral.apply(this, __spread(icons));
            };
        /**
         * @param {?} prefix
         * @return {?}
         */
        IconService.prototype.changeAssetsSource = /**
         * @param {?} prefix
         * @return {?}
         */
            function (prefix) {
                this._assetsSource = prefix.endsWith('/') ? prefix : prefix + '/';
            };
        /**
         * Register icon.
         * @param icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         */
        /**
         * Register icon.
         * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         * @return {?}
         */
        IconService.prototype._addIconLiteral = /**
         * Register icon.
         * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
         *   icons provided by ant-design should implement IconDefinition both.
         * @return {?}
         */
            function () {
                var _this = this;
                var icons = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    icons[_i] = arguments[_i];
                }
                icons.forEach(function (icon) {
                    _this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
                });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        IconService.prototype._get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this._svgDefinitions.get(key) || null;
            };
        /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         */
        /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         * @param {?} url
         * @return {?}
         */
        IconService.prototype._getFromRemote = /**
         * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
         * @param {?} url
         * @return {?}
         */
            function (url) {
                if (this._http) {
                    /** @type {?} */
                    var task = this._httpQueue.get(url);
                    /** @type {?} */
                    var ob = void 0;
                    if (task) {
                        ob = task.ob;
                    }
                    else {
                        ob = this._createObservableRequest(url);
                        task = { ob: ob };
                        this._httpQueue.set(url, task);
                    }
                    return ob;
                }
                else {
                    printWarn('You need to import HttpClient module to use dynamic importing');
                    return rxjs.of(null);
                }
            };
        /**
         * @param {?} url
         * @return {?}
         */
        IconService.prototype._createObservableRequest = /**
         * @param {?} url
         * @return {?}
         */
            function (url) {
                var _this = this;
                /** @type {?} */
                var icon = getIconDefinitionFromAbbr(url);
                return this._http.get(this._assetsSource + "assets/" + icon.theme + "/" + icon.name + ".svg", { responseType: 'text' }).pipe(operators.share(), // Use `share` so if multi directives request the same icon, HTTP request would only be fired once.
                operators.tap(function () {
                    _this._httpQueue.delete(url);
                }), operators.map(function (svgString) {
                    icon.icon = svgString;
                    _this._addIconLiteral(icon);
                    return icon;
                }), operators.catchError(function () {
                    printErr("the icon " + url + " does not exist in your assets folder");
                    _this._httpQueue.delete(url);
                    return rxjs.of(null);
                }));
            };
        /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
         * so we provided a unified interface here.
         *
         * TODO: namespace in the future
         */
        /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
         * so we provided a unified interface here.
         *
         * TODO: namespace in the future
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
        IconService.prototype.getRenderedContent = /**
         * Icon component would call this method to get a SVG element.
         * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
         * so we provided a unified interface here.
         *
         * TODO: namespace in the future
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
            function (icon, twoToneColor) {
                var _this = this;
                /** @type {?} */
                var definitionOrNull = isIconDefinition(icon)
                    ? ((icon))
                    : this._get(((icon)));
                /** @type {?} */
                var $icon = definitionOrNull ? rxjs.of(definitionOrNull) : this._getFromRemote(((icon)));
                return $icon.pipe(operators.map(function (i) {
                    if (i) {
                        return _this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
                    }
                    else {
                        printErr("the icon " + icon + " does not exist or is not registered");
                        return null;
                    }
                }));
            };
        /**
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
        IconService.prototype._loadSVGFromCacheOrCreateNew = /**
         * @param {?} icon
         * @param {?=} twoToneColor
         * @return {?}
         */
            function (icon, twoToneColor) {
                /** @type {?} */
                var svg;
                /** @type {?} */
                var pri = twoToneColor || this._twoToneColorPalette.primaryColor;
                /** @type {?} */
                var sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
                /** @type {?} */
                var key = withSuffixAndColor(icon.name, icon.theme, pri, sec);
                /** @type {?} */
                var cached = this._svgCachedDefinitions.get(key);
                // If this icon is used before, there should be a copy in cachedDefinitions, just copy it.
                // Otherwise, generate one from string or SVG element, and cache it.
                if (!cached) {
                    svg = this._setSVGAttribute(this._colorizeSVGIcon(typeof icon.icon === 'string'
                        ? this._createSVGElementFromString(icon.icon)
                        : icon.icon, (icon.theme === 'twotone'), pri, sec));
                    this._svgCachedDefinitions.set(key, ((__assign({}, icon, { icon: svg }))));
                }
                else {
                    svg = cached.icon;
                }
                return cloneSVG(svg);
            };
        /**
         * @param {?} str
         * @return {?}
         */
        IconService.prototype._createSVGElementFromString = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var colorParsed = replaceFillColor(str);
                /** @type {?} */
                var div = this._document.createElement('div');
                div.innerHTML = colorParsed;
                /** @type {?} */
                var svg = div.querySelector('svg');
                if (!svg) {
                    throw Error('<svg> tag not found');
                }
                return svg;
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        IconService.prototype._setSVGAttribute = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                this._renderer.setAttribute(svg, 'width', '1em');
                this._renderer.setAttribute(svg, 'height', '1em');
                return svg;
            };
        /**
         * @param {?} svg
         * @param {?} twotone
         * @param {?} pri
         * @param {?} sec
         * @return {?}
         */
        IconService.prototype._colorizeSVGIcon = /**
         * @param {?} svg
         * @param {?} twotone
         * @param {?} pri
         * @param {?} sec
         * @return {?}
         */
            function (svg, twotone, pri, sec) {
                if (twotone) {
                    /** @type {?} */
                    var children = svg.childNodes;
                    /** @type {?} */
                    var length_1 = children.length;
                    for (var i = 0; i < length_1; i++) {
                        /** @type {?} */
                        var child = ((children[i]));
                        if (child.getAttribute('fill') === 'secondaryColor') {
                            this._renderer.setAttribute(child, 'fill', sec);
                        }
                        else {
                            this._renderer.setAttribute(child, 'fill', pri);
                        }
                    }
                }
                this._renderer.setAttribute(svg, 'fill', 'currentColor');
                return svg;
            };
        /**
         * Clear all cached icons.
         */
        /**
         * Clear all cached icons.
         * @return {?}
         */
        IconService.prototype.clear = /**
         * Clear all cached icons.
         * @return {?}
         */
            function () {
                this._svgDefinitions.clear();
            };
        IconService.ctorParameters = function () {
            return [
                { type: core.RendererFactory2 },
                { type: http.HttpBackend, decorators: [{ type: core.Optional }] },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        return IconService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Developers use this component to render an SVG element.
     *
     * For memory usage consideration, this component should be as minimal as possible. IconService would do the most work.
     */
    var IconDirective = (function () {
        function IconDirective(_iconService, _elementRef, _renderer) {
            this._iconService = _iconService;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
        }
        /**
         * @return {?}
         */
        IconDirective.prototype._changeIcon = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (_this.type) {
                        _this._iconService.getRenderedContent(_this._parseIconType(_this.type, _this.theme), _this.twoToneColor).subscribe(function (svg) {
                            if (svg) {
                                _this._setSVGElement(svg);
                                resolve(((svg)));
                            }
                            else {
                                reject(null);
                            }
                        });
                    }
                    else {
                        reject(null);
                    }
                });
            };
        /**
         * @param {?} type
         * @param {?} theme
         * @return {?}
         */
        IconDirective.prototype._parseIconType = /**
         * @param {?} type
         * @param {?} theme
         * @return {?}
         */
            function (type, theme) {
                if (isIconDefinition(type)) {
                    return type;
                }
                else {
                    /** @type {?} */
                    var typeTr = ((type));
                    if (typeTr.endsWith('-fill') || typeTr.endsWith('-o') || typeTr.endsWith('-twotone')) {
                        if (!!theme) {
                            printErr("'type' " + type + " already gets a theme inside so 'theme' " + theme + " would be ignored");
                        }
                        return type;
                    }
                    else {
                        return withSuffix(((type)), theme || this._iconService.defaultTheme);
                    }
                }
            };
        /**
         * @param {?} svg
         * @return {?}
         */
        IconDirective.prototype._setSVGElement = /**
         * @param {?} svg
         * @return {?}
         */
            function (svg) {
                this._clearSVGElement();
                this._renderer.appendChild(this._elementRef.nativeElement, svg);
            };
        /**
         * @return {?}
         */
        IconDirective.prototype._clearSVGElement = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var self = this._elementRef.nativeElement;
                /** @type {?} */
                var children = self.childNodes;
                /** @type {?} */
                var childCount = children.length;
                for (var i = childCount - 1; i >= 0; i--) {
                    /** @type {?} */
                    var child = ((children[i]));
                    if (child.tagName.toLowerCase() === 'svg') {
                        this._renderer.removeChild(self, child);
                    }
                }
            };
        /**
         * @return {?}
         */
        IconDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this._changeIcon();
            };
        IconDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[antIcon]'
                    },] }
        ];
        IconDirective.ctorParameters = function () {
            return [
                { type: IconService },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        IconDirective.propDecorators = {
            type: [{ type: core.Input }],
            theme: [{ type: core.Input }],
            twoToneColor: [{ type: core.Input }]
        };
        return IconDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var IconModule = (function () {
        function IconModule() {
        }
        IconModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        exports: [IconDirective],
                        declarations: [IconDirective],
                        providers: [IconService]
                    },] }
        ];
        return IconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    // This icon file is generated by build/generate.ts
    // tslint:disable
    /** @type {?} */
    var manifest = {
        fill: [
            'account-book',
            'alert',
            'alipay-circle',
            'alipay-square',
            'aliwangwang',
            'amazon-circle',
            'amazon-square',
            'api',
            'android',
            'apple',
            'appstore',
            'audio',
            'backward',
            'bank',
            'behance-circle',
            'behance-square',
            'bell',
            'book',
            'box-plot',
            'build',
            'bulb',
            'calculator',
            'camera',
            'calendar',
            'car',
            'caret-down',
            'caret-left',
            'caret-right',
            'caret-up',
            'carry-out',
            'check-circle',
            'check-square',
            'chrome',
            'clock-circle',
            'ci-circle',
            'close-circle',
            'close-square',
            'cloud',
            'code-sandbox-circle',
            'code-sandbox-square',
            'code',
            'codepen-circle',
            'codepen-square',
            'container',
            'contacts',
            'compass',
            'control',
            'copy',
            'credit-card',
            'copyright-circle',
            'crown',
            'customer-service',
            'dashboard',
            'database',
            'delete',
            'diff',
            'dingtalk-circle',
            'dingtalk-square',
            'dollar-circle',
            'dislike',
            'down-circle',
            'dribbble-circle',
            'down-square',
            'dribbble-square',
            'dropbox-circle',
            'dropbox-square',
            'edit',
            'environment',
            'exclamation-circle',
            'euro-circle',
            'experiment',
            'eye',
            'facebook',
            'fast-backward',
            'fast-forward',
            'file-excel',
            'file-add',
            'file-exclamation',
            'file-image',
            'file-ppt',
            'file-pdf',
            'file-markdown',
            'file-text',
            'file-unknown',
            'file-zip',
            'file-word',
            'file',
            'fire',
            'flag',
            'filter',
            'folder-add',
            'folder-open',
            'forward',
            'folder',
            'frown',
            'fund',
            'funnel-plot',
            'gift',
            'github',
            'gitlab',
            'golden',
            'google-circle',
            'google-plus-circle',
            'google-plus-square',
            'google-square',
            'hdd',
            'highlight',
            'heart',
            'home',
            'hourglass',
            'ie-circle',
            'html5',
            'idcard',
            'ie-square',
            'info-circle',
            'instagram',
            'insurance',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'linkedin',
            'like',
            'lock',
            'mail',
            'medicine-box',
            'medium-square',
            'medium-circle',
            'meh',
            'message',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'pay-circle',
            'phone',
            'picture',
            'pie-chart',
            'play-square',
            'play-circle',
            'plus-circle',
            'profile',
            'plus-square',
            'pound-circle',
            'printer',
            'project',
            'qq-circle',
            'pushpin',
            'property-safety',
            'qq-square',
            'read',
            'question-circle',
            'reconciliation',
            'red-envelope',
            'reddit-circle',
            'reddit-square',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'save',
            'security-scan',
            'shop',
            'setting',
            'shopping',
            'sketch-circle',
            'sketch-square',
            'skype',
            'skin',
            'slack-circle',
            'slack-square',
            'sliders',
            'smile',
            'snippets',
            'sound',
            'star',
            'step-backward',
            'step-forward',
            'stop',
            'switcher',
            'tablet',
            'tag',
            'tags',
            'taobao-circle',
            'taobao-square',
            'thunderbolt',
            'tool',
            'trademark-circle',
            'trophy',
            'twitter-circle',
            'twitter-square',
            'unlock',
            'up-circle',
            'up-square',
            'usb',
            'video-camera',
            'wallet',
            'warning',
            'wechat',
            'weibo-circle',
            'weibo-square',
            'windows',
            'yahoo',
            'youtube',
            'zhihu-circle',
            'yuque',
            'zhihu-square'
        ],
        outline: [
            'account-book',
            'alert',
            'alipay-circle',
            'aliwangwang',
            'api',
            'android',
            'apple',
            'appstore',
            'audio',
            'backward',
            'bank',
            'behance-square',
            'bell',
            'book',
            'box-plot',
            'build',
            'bulb',
            'calculator',
            'camera',
            'calendar',
            'car',
            'caret-down',
            'caret-left',
            'caret-right',
            'caret-up',
            'carry-out',
            'check-circle',
            'check-square',
            'chrome',
            'clock-circle',
            'close-circle',
            'close-square',
            'cloud',
            'code',
            'codepen-circle',
            'container',
            'contacts',
            'compass',
            'control',
            'copy',
            'credit-card',
            'crown',
            'customer-service',
            'dashboard',
            'database',
            'delete',
            'diff',
            'dislike',
            'down-circle',
            'down-square',
            'dribbble-square',
            'edit',
            'environment',
            'exclamation-circle',
            'experiment',
            'eye',
            'facebook',
            'fast-backward',
            'fast-forward',
            'file-excel',
            'file-add',
            'file-exclamation',
            'file-image',
            'file-ppt',
            'file-pdf',
            'file-markdown',
            'file-text',
            'file-unknown',
            'file-zip',
            'file-word',
            'file',
            'fire',
            'flag',
            'filter',
            'folder-add',
            'folder-open',
            'forward',
            'folder',
            'frown',
            'fund',
            'funnel-plot',
            'gift',
            'github',
            'gitlab',
            'hdd',
            'highlight',
            'heart',
            'home',
            'hourglass',
            'html5',
            'idcard',
            'info-circle',
            'instagram',
            'insurance',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'linkedin',
            'like',
            'lock',
            'mail',
            'medicine-box',
            'meh',
            'message',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'pay-circle',
            'phone',
            'picture',
            'pie-chart',
            'play-square',
            'play-circle',
            'plus-circle',
            'profile',
            'plus-square',
            'printer',
            'project',
            'pushpin',
            'property-safety',
            'read',
            'question-circle',
            'reconciliation',
            'red-envelope',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'save',
            'security-scan',
            'shop',
            'setting',
            'shopping',
            'skype',
            'skin',
            'slack-square',
            'sliders',
            'smile',
            'snippets',
            'sound',
            'star',
            'step-backward',
            'step-forward',
            'stop',
            'switcher',
            'tablet',
            'tag',
            'tags',
            'taobao-circle',
            'thunderbolt',
            'tool',
            'trophy',
            'unlock',
            'up-circle',
            'up-square',
            'usb',
            'video-camera',
            'wallet',
            'warning',
            'wechat',
            'weibo-circle',
            'weibo-square',
            'windows',
            'yahoo',
            'youtube',
            'yuque',
            'alibaba',
            'align-center',
            'align-left',
            'align-right',
            'alipay',
            'amazon',
            'aliyun',
            'ant-cloud',
            'ant-design',
            'apartment',
            'area-chart',
            'arrow-down',
            'arrow-left',
            'arrow-right',
            'arrow-up',
            'arrows-alt',
            'audit',
            'bar-chart',
            'barcode',
            'bars',
            'behance',
            'block',
            'bg-colors',
            'bold',
            'border-bottom',
            'border-horizontal',
            'border-inner',
            'border-left',
            'border-outer',
            'border-right',
            'border-verticle',
            'border-top',
            'border',
            'branches',
            'check',
            'ci',
            'cloud-download',
            'close',
            'cloud-server',
            'cloud-sync',
            'cloud-upload',
            'cluster',
            'code-sandbox',
            'codepen',
            'coffee',
            'colum-height',
            'column-width',
            'copyright',
            'dash',
            'deployment-unit',
            'desktop',
            'disconnect',
            'dingding',
            'dollar',
            'double-left',
            'dot-chart',
            'double-right',
            'down',
            'download',
            'drag',
            'dribbble',
            'dropbox',
            'ellipsis',
            'enter',
            'euro',
            'exception',
            'exclamation',
            'export',
            'fall',
            'file-done',
            'file-jpg',
            'file-protect',
            'file-search',
            'file-sync',
            'font-colors',
            'font-size',
            'fork',
            'form',
            'fullscreen-exit',
            'fullscreen',
            'gateway',
            'global',
            'gold',
            'google-plus',
            'google',
            'heat-map',
            'ie',
            'import',
            'inbox',
            'info',
            'italic',
            'issues-close',
            'key',
            'laptop',
            'left',
            'line-chart',
            'line-height',
            'line',
            'link',
            'loading-3-quarters',
            'loading',
            'login',
            'logout',
            'man',
            'medium-workmark',
            'medium',
            'menu-fold',
            'menu',
            'menu-unfold',
            'minus',
            'monitor',
            'mr',
            'number',
            'ordered-list',
            'paper-clip',
            'pause',
            'percentage',
            'pic-center',
            'pic-left',
            'pic-right',
            'plus',
            'pound',
            'poweroff',
            'qq',
            'qrcode',
            'question',
            'radar-chart',
            'radius-bottomleft',
            'radius-bottomright',
            'radius-setting',
            'radius-upleft',
            'radius-upright',
            'reddit',
            'redo',
            'reload-time',
            'reload',
            'retweet',
            'right',
            'rise',
            'robot',
            'rollback',
            'safety',
            'scan',
            'scissor',
            'search',
            'select',
            'shake',
            'share-alt',
            'shopping-cart',
            'shrink',
            'sketch',
            'slack',
            'small-dash',
            'solution',
            'sort-ascending',
            'sort-descending',
            'stock',
            'strikethrough',
            'swap-left',
            'swap-right',
            'swap',
            'sync',
            'table',
            'team',
            'taobao',
            'to-top',
            'trademark',
            'transaction',
            'twitter',
            'underline',
            'undo',
            'unordered-list',
            'up',
            'upload',
            'user-delete',
            'user-add',
            'usergroup-add',
            'user',
            'usergroup-delete',
            'vertical-align-bottom',
            'vertical-align-middle',
            'vertical-align-top',
            'vertical-left',
            'vertical-right',
            'weibo',
            'wifi',
            'woman',
            'zoom-in',
            'zhihu',
            'zoom-out'
        ],
        twotone: [
            'account-book',
            'alert',
            'api',
            'appstore',
            'audio',
            'bank',
            'bell',
            'book',
            'box-plot',
            'build',
            'bulb',
            'calculator',
            'camera',
            'car',
            'carry-out',
            'check-circle',
            'check-square',
            'clock-circle',
            'close-circle',
            'close-square',
            'cloud',
            'code',
            'container',
            'contacts',
            'compass',
            'control',
            'copy',
            'credit-card',
            'crown',
            'customer-service',
            'dashboard',
            'database',
            'delete',
            'diff',
            'dislike',
            'down-circle',
            'down-square',
            'edit',
            'environment',
            'exclamation-circle',
            'experiment',
            'eye',
            'file-excel',
            'file-add',
            'file-exclamation',
            'file-image',
            'file-ppt',
            'file-pdf',
            'file-markdown',
            'file-text',
            'file-unknown',
            'file-zip',
            'file-word',
            'file',
            'fire',
            'flag',
            'filter',
            'folder-add',
            'folder-open',
            'folder',
            'frown',
            'fund',
            'funnel-plot',
            'gift',
            'hdd',
            'highlight',
            'heart',
            'home',
            'hourglass',
            'html5',
            'idcard',
            'info-circle',
            'insurance',
            'interation',
            'layout',
            'left-square',
            'left-circle',
            'like',
            'lock',
            'mail',
            'medicine-box',
            'meh',
            'message',
            'minus-circle',
            'minus-square',
            'mobile',
            'money-collect',
            'notification',
            'pause-circle',
            'phone',
            'picture',
            'pie-chart',
            'play-square',
            'play-circle',
            'plus-circle',
            'profile',
            'plus-square',
            'pound-circle',
            'printer',
            'project',
            'pushpin',
            'property-safety',
            'question-circle',
            'reconciliation',
            'red-envelope',
            'rest',
            'right-circle',
            'right-square',
            'rocket',
            'safety-certificate',
            'schedule',
            'save',
            'security-scan',
            'shop',
            'setting',
            'shopping',
            'skin',
            'sliders',
            'smile',
            'snippets',
            'sound',
            'star',
            'stop',
            'switcher',
            'tablet',
            'tag',
            'tags',
            'thunderbolt',
            'tool',
            'trademark-circle',
            'trophy',
            'unlock',
            'up-circle',
            'up-square',
            'usb',
            'video-camera',
            'wallet',
            'warning',
            'ci',
            'copyright',
            'dollar',
            'euro',
            'gold',
            'canlendar'
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.IconModule = IconModule;
    exports.IconService = IconService;
    exports.IconDirective = IconDirective;
    exports.printErr = printErr;
    exports.printWarn = printWarn;
    exports.getSecondaryColor = getSecondaryColor;
    exports.withSuffix = withSuffix;
    exports.withSuffixAndColor = withSuffixAndColor;
    exports.isIconDefinition = isIconDefinition;
    exports.getIconDefinitionFromAbbr = getIconDefinitionFromAbbr;
    exports.cloneSVG = cloneSVG;
    exports.replaceFillColor = replaceFillColor;
    exports.manifest = manifest;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW50LWRlc2lnbi1pY29ucy1hbmd1bGFyLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJuZzovL0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXIvdXRpbHMudHMiLCJuZzovL0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXIvY29tcG9uZW50L2ljb24uc2VydmljZS50cyIsIm5nOi8vQGFudC1kZXNpZ24vaWNvbnMtYW5ndWxhci9jb21wb25lbnQvaWNvbi5kaXJlY3RpdmUudHMiLCJuZzovL0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXIvY29tcG9uZW50L2ljb24ubW9kdWxlLnRzIiwibmc6Ly9AYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyL21hbmlmZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcclxuICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2VuZXJhdGUgYXMgZ2VuZXJhdGVDb2xvciB9IGZyb20gJ2FudC1kZXNpZ24tcGFsZXR0ZXMnO1xuaW1wb3J0IHsgSWNvbkRlZmluaXRpb24sIFRoZW1lVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRFcnIobWVzc2FnZTogc3RyaW5nKSB7XG4gIGNvbnNvbGUuZXJyb3IoYFtAYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyXTogJHttZXNzYWdlfS5gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50V2FybihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgY29uc29sZS53YXJuKGBbQGFudC1kZXNpZ24vaWNvbnMtYW5ndWxhcl06ICR7bWVzc2FnZX0uYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3I6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBnZW5lcmF0ZUNvbG9yKHByaW1hcnlDb2xvcilbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoU3VmZml4KG5hbWU6IHN0cmluZywgdGhlbWU6IFRoZW1lVHlwZSk6IHN0cmluZyB7XG4gIHN3aXRjaCAodGhlbWUpIHtcbiAgICBjYXNlICdmaWxsJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS1maWxsYDtcbiAgICBjYXNlICdvdXRsaW5lJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS1vYDtcbiAgICBjYXNlICd0d290b25lJzpcbiAgICAgIHJldHVybiBgJHtuYW1lfS10d290b25lYDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5rbm93biB0aGVtZSB0eXBlOiAke3RoZW1lfSwgbmFtZTogJHtuYW1lfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEFiYnJUb1RoZW1lKGFiYnI6IHN0cmluZyk6IFRoZW1lVHlwZSB7XG4gIHJldHVybiBhYmJyID09PSAnbycgPyAnb3V0bGluZScgOiBhYmJyIGFzIFRoZW1lVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhTdWZmaXhBbmRDb2xvcihuYW1lOiBzdHJpbmcsIHRoZW1lOiBUaGVtZVR5cGUsIHByaTogc3RyaW5nLCBzZWM6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHt3aXRoU3VmZml4KG5hbWUsIHRoZW1lKX0tJHtwcml9LSR7c2VjfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ljb25EZWZpbml0aW9uKHRhcmdldDogYW55KTogdGFyZ2V0IGlzIEljb25EZWZpbml0aW9uIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiB0YXJnZXQubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICB0eXBlb2YgdGFyZ2V0LnRoZW1lID09PSAnc3RyaW5nJyAmJlxuICAgIC8vIEljb25EZWZpbml0aW9uLmljb24gY291bGQgYmUgYSBTVkc6IFdlIHJlbmRlciBTVkcgb25seSBvbmNlICh0aGUgZmlyc3QgdGltZSBhIGljb24gaXMgdXNlZClcbiAgICAvLyBhbmQgcmV0dXJuIGEgY29weSBldmVyeSB0aW1lIGFmdGVyIHRoYXQuXG4gICAgKHRhcmdldC5pY29uIGluc3RhbmNlb2YgU1ZHRWxlbWVudCB8fCB0eXBlb2YgdGFyZ2V0Lmljb24gPT09ICdzdHJpbmcnKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkRlZmluaXRpb25Gcm9tQWJicihzdHI6IHN0cmluZyk6IEljb25EZWZpbml0aW9uIHtcbiAgY29uc3QgYXJyID0gc3RyLnNwbGl0KCctJyk7XG4gIGNvbnN0IHRoZW1lID0gbWFwQWJiclRvVGhlbWUoYXJyLnNwbGljZShhcnIubGVuZ3RoIC0gMSwgMSlbMF0pO1xuICBjb25zdCBuYW1lID0gYXJyLmpvaW4oJy0nKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgdGhlbWUsXG4gICAgaWNvbjogJydcbiAgfSBhcyBJY29uRGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lU1ZHKHN2ZzogU1ZHRWxlbWVudCk6IFNWR0VsZW1lbnQge1xuICByZXR1cm4gc3ZnLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdFbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUZpbGxDb2xvcihyYXc6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiByYXdcbiAgICAucmVwbGFjZSgvWydcIl0jMzMzWydcIl0vZywgJ1wicHJpbWFyeUNvbG9yXCInKVxuICAgIC5yZXBsYWNlKC9bJ1wiXSNFNkU2RTZbJ1wiXS9nLCAnXCJzZWNvbmRhcnlDb2xvclwiJylcbiAgICAucmVwbGFjZSgvWydcIl0jRDlEOUQ5WydcIl0vZywgJ1wic2Vjb25kYXJ5Q29sb3JcIicpXG4gICAgLnJlcGxhY2UoL1snXCJdI0Q4RDhEOFsnXCJdL2csICdcInNlY29uZGFyeUNvbG9yXCInKTtcbn1cbiIsImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBCYWNrZW5kIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT3B0aW9uYWwsIEluamVjdCwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc2hhcmUsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIEljb25EZWZpbml0aW9uLFxuICBDYWNoZWRJY29uRGVmaW5pdGlvbixcbiAgVHdvVG9uZUNvbG9yUGFsZXR0ZSxcbiAgVHdvVG9uZUNvbG9yUGFsZXR0ZVNldHRlcixcbiAgVGhlbWVUeXBlXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIGdldFNlY29uZGFyeUNvbG9yLFxuICB3aXRoU3VmZml4LFxuICBpc0ljb25EZWZpbml0aW9uLFxuICBwcmludEVycixcbiAgcHJpbnRXYXJuLFxuICBjbG9uZVNWRyxcbiAgd2l0aFN1ZmZpeEFuZENvbG9yLFxuICBnZXRJY29uRGVmaW5pdGlvbkZyb21BYmJyLFxuICByZXBsYWNlRmlsbENvbG9yXG59IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXFJY29uVGFzayB7XG4gIG9iOiBPYnNlcnZhYmxlPEljb25EZWZpbml0aW9uIHwgbnVsbD47XG59XG5cbmV4cG9ydCBjbGFzcyBJY29uU2VydmljZSB7XG4gIGRlZmF1bHRUaGVtZTogVGhlbWVUeXBlID0gJ291dGxpbmUnO1xuXG4gIHByb3RlY3RlZCBfcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgcHJvdGVjdGVkIF9odHRwOiBIdHRwQ2xpZW50O1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBpY29ucy5cbiAgICovXG4gIHByb3RlY3RlZCBfc3ZnRGVmaW5pdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgSWNvbkRlZmluaXRpb24+KCk7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHJlbmRlcmVkICh3aXRoIGNvbG9yKSBTVkcgaWNvbnMuXG4gICAqL1xuICBwcm90ZWN0ZWQgX3N2Z0NhY2hlZERlZmluaXRpb25zID0gbmV3IE1hcDxzdHJpbmcsIENhY2hlZEljb25EZWZpbml0aW9uPigpO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGNvbG9yIHNldHRpbmdzLlxuICAgKi9cbiAgcHJvdGVjdGVkIF90d29Ub25lQ29sb3JQYWxldHRlOiBUd29Ub25lQ29sb3JQYWxldHRlID0ge1xuICAgIHByaW1hcnlDb2xvciAgOiAnIzMzMzMzMycsXG4gICAgc2Vjb25kYXJ5Q29sb3I6ICcjRTZFNkU2J1xuICB9O1xuXG4gIHByb3RlY3RlZCBfYXNzZXRzU291cmNlID0gJyc7XG5cbiAgLyoqXG4gICAqIFRvIG5vdGUgd2hldGhlciBhIHJlcXVlc3QgdG8gYW4gaWNvbiBpcyB1bmRlciBwcm9jZXNzaW5nLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9odHRwUXVldWUgPSBuZXcgTWFwPHN0cmluZywgUmVxSWNvblRhc2s+KCk7XG5cbiAgc2V0IHR3b1RvbmVDb2xvcih7IHByaW1hcnlDb2xvciwgc2Vjb25kYXJ5Q29sb3IgfTogVHdvVG9uZUNvbG9yUGFsZXR0ZVNldHRlcikge1xuICAgIGlmIChwcmltYXJ5Q29sb3IgJiYgdHlwZW9mIHByaW1hcnlDb2xvciA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHNlY29uZGFyeUNvbG9yID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygc2Vjb25kYXJ5Q29sb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLl90d29Ub25lQ29sb3JQYWxldHRlLnByaW1hcnlDb2xvciA9IHByaW1hcnlDb2xvcjtcbiAgICAgIHRoaXMuX3R3b1RvbmVDb2xvclBhbGV0dGUuc2Vjb25kYXJ5Q29sb3IgPSBzZWNvbmRhcnlDb2xvciB8fCBnZXRTZWNvbmRhcnlDb2xvcihwcmltYXJ5Q29sb3IpO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0d29Ub25lQ29sb3IoKTogVHdvVG9uZUNvbG9yUGFsZXR0ZVNldHRlciB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy50d29Ub25lQ29sb3IgfSBhcyBUd29Ub25lQ29sb3JQYWxldHRlOyAvLyBNYWtlIGEgY29weSB0byBhdm9pZCB1bmV4cGVjdGVkIGNoYW5nZXMuXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgSWNvbkRlZmluaXRpb24gcHJvdmlkZWQgYnkgQW50IERlc2lnbiwgcGFyc2luZyBBYnN0cmFjdE5vZGUgdG8gc3ZnIHN0cmluZy5cbiAgICogQHBhcmFtIGljb25zXG4gICAqL1xuICBhZGRJY29uKC4uLmljb25zOiBJY29uRGVmaW5pdGlvbltdKTogdm9pZCB7XG4gICAgdGhpcy5fYWRkSWNvbkxpdGVyYWwoLi4uaWNvbnMpO1xuICB9XG5cbiAgY2hhbmdlQXNzZXRzU291cmNlKHByZWZpeDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fYXNzZXRzU291cmNlID0gcHJlZml4LmVuZHNXaXRoKCcvJykgPyBwcmVmaXggOiBwcmVmaXggKyAnLyc7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgaWNvbi5cbiAgICogQHBhcmFtIGljb25zIEljb25zIHRoYXQgdXNlcnMgd2FudCB0byB1c2UgaW4gdGhlaXIgcHJvamVjdHMuIFVzZXIgZGVmaW5lZCBpY29ucyBhbmQgcHJlZGVmaW5lZFxuICAgKiAgIGljb25zIHByb3ZpZGVkIGJ5IGFudC1kZXNpZ24gc2hvdWxkIGltcGxlbWVudCBJY29uRGVmaW5pdGlvbiBib3RoLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9hZGRJY29uTGl0ZXJhbCguLi5pY29uczogSWNvbkRlZmluaXRpb25bXSk6IHZvaWQge1xuICAgIGljb25zLmZvckVhY2goaWNvbiA9PiB7XG4gICAgICB0aGlzLl9zdmdEZWZpbml0aW9ucy5zZXQod2l0aFN1ZmZpeChpY29uLm5hbWUsIGljb24udGhlbWUpLCBpY29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfZ2V0KGtleTogc3RyaW5nKTogSWNvbkRlZmluaXRpb24gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fc3ZnRGVmaW5pdGlvbnMuZ2V0KGtleSkgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gc3RhdGljIGZpbGUgYW5kIHJldHVybiBpdCBhcyBhIHN0cmluZywgY3JlYXRlIGEgSWNvbkRlZmluaXRpb24gYW5kIGNhY2hlIGl0IG9yIHJldHVybiBudWxsLlxuICAgKi9cbiAgcHJvdGVjdGVkIF9nZXRGcm9tUmVtb3RlKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxJY29uRGVmaW5pdGlvbiB8IG51bGw+IHtcbiAgICBpZiAodGhpcy5faHR0cCkge1xuICAgICAgbGV0IHRhc2sgPSB0aGlzLl9odHRwUXVldWUuZ2V0KHVybCk7XG4gICAgICBsZXQgb2I6IE9ic2VydmFibGU8SWNvbkRlZmluaXRpb24gfCBudWxsPjtcbiAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgIG9iID0gdGFzay5vYjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iID0gdGhpcy5fY3JlYXRlT2JzZXJ2YWJsZVJlcXVlc3QodXJsKTtcbiAgICAgICAgdGFzayA9IHsgb2IgfTtcbiAgICAgICAgdGhpcy5faHR0cFF1ZXVlLnNldCh1cmwsIHRhc2spO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmludFdhcm4oJ1lvdSBuZWVkIHRvIGltcG9ydCBIdHRwQ2xpZW50IG1vZHVsZSB0byB1c2UgZHluYW1pYyBpbXBvcnRpbmcnKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlT2YobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfY3JlYXRlT2JzZXJ2YWJsZVJlcXVlc3QodXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEljb25EZWZpbml0aW9uIHwgbnVsbD4ge1xuICAgIGNvbnN0IGljb246IEljb25EZWZpbml0aW9uID0gZ2V0SWNvbkRlZmluaXRpb25Gcm9tQWJicih1cmwpO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldChcbiAgICAgIGAke3RoaXMuX2Fzc2V0c1NvdXJjZX1hc3NldHMvJHtpY29uLnRoZW1lfS8ke2ljb24ubmFtZX0uc3ZnYCxcbiAgICAgIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfVxuICAgICkucGlwZShcbiAgICAgIHNoYXJlKCksIC8vIFVzZSBgc2hhcmVgIHNvIGlmIG11bHRpIGRpcmVjdGl2ZXMgcmVxdWVzdCB0aGUgc2FtZSBpY29uLCBIVFRQIHJlcXVlc3Qgd291bGQgb25seSBiZSBmaXJlZCBvbmNlLlxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgdGhpcy5faHR0cFF1ZXVlLmRlbGV0ZSh1cmwpO1xuICAgICAgfSksXG4gICAgICBtYXAoc3ZnU3RyaW5nID0+IHtcbiAgICAgICAgaWNvbi5pY29uID0gc3ZnU3RyaW5nO1xuICAgICAgICB0aGlzLl9hZGRJY29uTGl0ZXJhbChpY29uKTtcbiAgICAgICAgcmV0dXJuIGljb247XG4gICAgICB9KSxcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICBwcmludEVycihgdGhlIGljb24gJHt1cmx9IGRvZXMgbm90IGV4aXN0IGluIHlvdXIgYXNzZXRzIGZvbGRlcmApO1xuICAgICAgICB0aGlzLl9odHRwUXVldWUuZGVsZXRlKHVybCk7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlT2YobnVsbCk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWNvbiBjb21wb25lbnQgd291bGQgY2FsbCB0aGlzIG1ldGhvZCB0byBnZXQgYSBTVkcgZWxlbWVudC5cbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIE9ic2VydmFibGUgU1ZHIGVsZW1lbnQgYmVjYXVzZSB3aGVuIHVzZXIgd2FudHMgdG8gZ2V0IGFuIGljb24gZnJvbSBVUkwsIGl0IHdvdWxkIGJlIGFzeW5jLFxuICAgKiBzbyB3ZSBwcm92aWRlZCBhIHVuaWZpZWQgaW50ZXJmYWNlIGhlcmUuXG4gICAqXG4gICAqIFRPRE86IG5hbWVzcGFjZSBpbiB0aGUgZnV0dXJlXG4gICAqL1xuICBnZXRSZW5kZXJlZENvbnRlbnQoaWNvbjogSWNvbkRlZmluaXRpb24gfCBzdHJpbmcsIHR3b1RvbmVDb2xvcj86IHN0cmluZyk6IE9ic2VydmFibGU8U1ZHRWxlbWVudCB8IG51bGw+IHtcbiAgICBjb25zdCBkZWZpbml0aW9uT3JOdWxsOiBJY29uRGVmaW5pdGlvbiB8IG51bGwgPSBpc0ljb25EZWZpbml0aW9uKGljb24pXG4gICAgICA/IGljb24gYXMgSWNvbkRlZmluaXRpb25cbiAgICAgIDogdGhpcy5fZ2V0KGljb24gYXMgc3RyaW5nKTtcbiAgICBjb25zdCAkaWNvbiA9IGRlZmluaXRpb25Pck51bGwgPyBvYnNlcnZhYmxlT2YoZGVmaW5pdGlvbk9yTnVsbCkgOiB0aGlzLl9nZXRGcm9tUmVtb3RlKGljb24gYXMgc3RyaW5nKTtcblxuICAgIHJldHVybiAkaWNvbi5waXBlKFxuICAgICAgbWFwKGkgPT4ge1xuICAgICAgICBpZiAoaSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkU1ZHRnJvbUNhY2hlT3JDcmVhdGVOZXcoaSwgdHdvVG9uZUNvbG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludEVycihgdGhlIGljb24gJHtpY29ufSBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgcmVnaXN0ZXJlZGApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2xvYWRTVkdGcm9tQ2FjaGVPckNyZWF0ZU5ldyhpY29uOiBJY29uRGVmaW5pdGlvbiwgdHdvVG9uZUNvbG9yPzogc3RyaW5nKTogU1ZHRWxlbWVudCB7XG4gICAgbGV0IHN2ZzogU1ZHRWxlbWVudDtcbiAgICBjb25zdCBwcmkgPSB0d29Ub25lQ29sb3IgfHwgdGhpcy5fdHdvVG9uZUNvbG9yUGFsZXR0ZS5wcmltYXJ5Q29sb3I7XG4gICAgY29uc3Qgc2VjID0gZ2V0U2Vjb25kYXJ5Q29sb3IocHJpKSB8fCB0aGlzLl90d29Ub25lQ29sb3JQYWxldHRlLnNlY29uZGFyeUNvbG9yO1xuICAgIGNvbnN0IGtleSA9IHdpdGhTdWZmaXhBbmRDb2xvcihpY29uLm5hbWUsIGljb24udGhlbWUsIHByaSwgc2VjKTtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLl9zdmdDYWNoZWREZWZpbml0aW9ucy5nZXQoa2V5KTtcblxuICAgIC8vIElmIHRoaXMgaWNvbiBpcyB1c2VkIGJlZm9yZSwgdGhlcmUgc2hvdWxkIGJlIGEgY29weSBpbiBjYWNoZWREZWZpbml0aW9ucywganVzdCBjb3B5IGl0LlxuICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgb25lIGZyb20gc3RyaW5nIG9yIFNWRyBlbGVtZW50LCBhbmQgY2FjaGUgaXQuXG4gICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgIHN2ZyA9IHRoaXMuX3NldFNWR0F0dHJpYnV0ZSh0aGlzLl9jb2xvcml6ZVNWR0ljb24oXG4gICAgICAgIHR5cGVvZiBpY29uLmljb24gPT09ICdzdHJpbmcnXG4gICAgICAgICAgPyB0aGlzLl9jcmVhdGVTVkdFbGVtZW50RnJvbVN0cmluZyhpY29uLmljb24pXG4gICAgICAgICAgOiBpY29uLmljb25cbiAgICAgICAgLCAoaWNvbi50aGVtZSA9PT0gJ3R3b3RvbmUnKSwgcHJpLCBzZWNcbiAgICAgICkpO1xuICAgICAgdGhpcy5fc3ZnQ2FjaGVkRGVmaW5pdGlvbnMuc2V0KGtleSwgeyAuLi5pY29uLCBpY29uOiBzdmcgfSBhcyBDYWNoZWRJY29uRGVmaW5pdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN2ZyA9IGNhY2hlZC5pY29uO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZVNWRyhzdmcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9jcmVhdGVTVkdFbGVtZW50RnJvbVN0cmluZyhzdHI6IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICAgIGNvbnN0IGNvbG9yUGFyc2VkID0gcmVwbGFjZUZpbGxDb2xvcihzdHIpO1xuICAgIGNvbnN0IGRpdiA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBjb2xvclBhcnNlZDtcbiAgICBjb25zdCBzdmc6IFNWR0VsZW1lbnQgPSBkaXYucXVlcnlTZWxlY3Rvcignc3ZnJyk7XG4gICAgaWYgKCFzdmcpIHtcbiAgICAgIHRocm93IEVycm9yKCc8c3ZnPiB0YWcgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiBzdmc7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3NldFNWR0F0dHJpYnV0ZShzdmc6IFNWR0VsZW1lbnQpOiBTVkdFbGVtZW50IHtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUoc3ZnLCAnd2lkdGgnLCAnMWVtJyk7XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHN2ZywgJ2hlaWdodCcsICcxZW0nKTtcbiAgICByZXR1cm4gc3ZnO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9jb2xvcml6ZVNWR0ljb24oc3ZnOiBTVkdFbGVtZW50LCB0d290b25lOiBib29sZWFuLCBwcmk6IHN0cmluZywgc2VjOiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcbiAgICBpZiAodHdvdG9uZSkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBzdmcuY2hpbGROb2RlcztcbiAgICAgIGNvbnN0IGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQ6IEhUTUxFbGVtZW50ID0gY2hpbGRyZW5bIGkgXSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgaWYgKGNoaWxkLmdldEF0dHJpYnV0ZSgnZmlsbCcpID09PSAnc2Vjb25kYXJ5Q29sb3InKSB7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKGNoaWxkLCAnZmlsbCcsIHNlYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKGNoaWxkLCAnZmlsbCcsIHByaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHN2ZywgJ2ZpbGwnLCAnY3VycmVudENvbG9yJyk7XG4gICAgcmV0dXJuIHN2ZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgY2FjaGVkIGljb25zLlxuICAgKi9cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fc3ZnRGVmaW5pdGlvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBfcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBfaGFuZGxlcjogSHR0cEJhY2tlbmQsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJvdGVjdGVkIF9kb2N1bWVudDogYW55XG4gICkge1xuICAgIC8vIEZvciBTU1IuXG4gICAgdGhpcy5fcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gICAgaWYgKHRoaXMuX2hhbmRsZXIpIHtcbiAgICAgIHRoaXMuX2h0dHAgPSBuZXcgSHR0cENsaWVudCh0aGlzLl9oYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIEVsZW1lbnRSZWYsXG4gIERpcmVjdGl2ZSwgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvblNlcnZpY2UgfSBmcm9tICcuL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBJY29uRGVmaW5pdGlvbiwgVGhlbWVUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNJY29uRGVmaW5pdGlvbiwgcHJpbnRFcnIsIHdpdGhTdWZmaXggfSBmcm9tICcuLi91dGlscyc7XG5cbi8qKlxuICogRGV2ZWxvcGVycyB1c2UgdGhpcyBjb21wb25lbnQgdG8gcmVuZGVyIGFuIFNWRyBlbGVtZW50LlxuICpcbiAqIEZvciBtZW1vcnkgdXNhZ2UgY29uc2lkZXJhdGlvbiwgdGhpcyBjb21wb25lbnQgc2hvdWxkIGJlIGFzIG1pbmltYWwgYXMgcG9zc2libGUuIEljb25TZXJ2aWNlIHdvdWxkIGRvIHRoZSBtb3N0IHdvcmsuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thbnRJY29uXSdcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZyB8IEljb25EZWZpbml0aW9uO1xuICBASW5wdXQoKSB0aGVtZTogVGhlbWVUeXBlO1xuICBASW5wdXQoKSB0d29Ub25lQ29sb3I6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX2NoYW5nZUljb24oKTogUHJvbWlzZTxTVkdBRWxlbWVudCB8IG51bGw+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHRoaXMudHlwZSkge1xuICAgICAgICB0aGlzLl9pY29uU2VydmljZS5nZXRSZW5kZXJlZENvbnRlbnQodGhpcy5fcGFyc2VJY29uVHlwZSh0aGlzLnR5cGUsIHRoaXMudGhlbWUpLCB0aGlzLnR3b1RvbmVDb2xvcikuc3Vic2NyaWJlKHN2ZyA9PiB7XG4gICAgICAgICAgaWYgKHN2Zykge1xuICAgICAgICAgICAgdGhpcy5fc2V0U1ZHRWxlbWVudChzdmcpO1xuICAgICAgICAgICAgcmVzb2x2ZShzdmcgYXMgU1ZHQUVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfcGFyc2VJY29uVHlwZSh0eXBlOiBzdHJpbmcgfCBJY29uRGVmaW5pdGlvbiwgdGhlbWU6IFRoZW1lVHlwZSk6IEljb25EZWZpbml0aW9uIHwgc3RyaW5nIHtcbiAgICBpZiAoaXNJY29uRGVmaW5pdGlvbih0eXBlKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHR5cGVUciA9IHR5cGUgYXMgc3RyaW5nO1xuICAgICAgaWYgKHR5cGVUci5lbmRzV2l0aCgnLWZpbGwnKSB8fCB0eXBlVHIuZW5kc1dpdGgoJy1vJykgfHwgdHlwZVRyLmVuZHNXaXRoKCctdHdvdG9uZScpKSB7XG4gICAgICAgIGlmICghIXRoZW1lKSB7XG4gICAgICAgICAgcHJpbnRFcnIoYCd0eXBlJyAke3R5cGV9IGFscmVhZHkgZ2V0cyBhIHRoZW1lIGluc2lkZSBzbyAndGhlbWUnICR7dGhlbWV9IHdvdWxkIGJlIGlnbm9yZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB3aXRoU3VmZml4KHR5cGUgYXMgc3RyaW5nLCB0aGVtZSB8fCB0aGlzLl9pY29uU2VydmljZS5kZWZhdWx0VGhlbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfc2V0U1ZHRWxlbWVudChzdmc6IFNWR0VsZW1lbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9jbGVhclNWR0VsZW1lbnQoKTtcbiAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHN2Zyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2NsZWFyU1ZHRWxlbWVudCgpOiB2b2lkIHtcbiAgICBjb25zdCBzZWxmOiBIVE1MRWxlbWVudCA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHNlbGYuY2hpbGROb2RlcztcbiAgICBjb25zdCBjaGlsZENvdW50ID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IGNoaWxkQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChjaGlsZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzdmcnKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKHNlbGYsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgX2ljb25TZXJ2aWNlOiBJY29uU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJvdGVjdGVkIF9yZW5kZXJlcjogUmVuZGVyZXIyXG4gICkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5fY2hhbmdlSWNvbigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEljb25TZXJ2aWNlIH0gZnJvbSAnLi9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWNvbkRpcmVjdGl2ZSB9IGZyb20gJy4vaWNvbi5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzICAgICA6IFsgQ29tbW9uTW9kdWxlIF0sXG4gIGV4cG9ydHMgICAgIDogWyBJY29uRGlyZWN0aXZlIF0sXG4gIGRlY2xhcmF0aW9uczogWyBJY29uRGlyZWN0aXZlIF0sXG4gIHByb3ZpZGVycyAgIDogWyBJY29uU2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIEljb25Nb2R1bGUge1xufVxuIiwiLy8gVGhpcyBpY29uIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IGJ1aWxkL2dlbmVyYXRlLnRzXG4vLyB0c2xpbnQ6ZGlzYWJsZVxuXG5pbXBvcnQgeyBNYW5pZmVzdCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgbWFuaWZlc3Q6IE1hbmlmZXN0ID0ge1xuICBmaWxsOiBbXG4gICAgJ2FjY291bnQtYm9vaycsXG4gICAgJ2FsZXJ0JyxcbiAgICAnYWxpcGF5LWNpcmNsZScsXG4gICAgJ2FsaXBheS1zcXVhcmUnLFxuICAgICdhbGl3YW5nd2FuZycsXG4gICAgJ2FtYXpvbi1jaXJjbGUnLFxuICAgICdhbWF6b24tc3F1YXJlJyxcbiAgICAnYXBpJyxcbiAgICAnYW5kcm9pZCcsXG4gICAgJ2FwcGxlJyxcbiAgICAnYXBwc3RvcmUnLFxuICAgICdhdWRpbycsXG4gICAgJ2JhY2t3YXJkJyxcbiAgICAnYmFuaycsXG4gICAgJ2JlaGFuY2UtY2lyY2xlJyxcbiAgICAnYmVoYW5jZS1zcXVhcmUnLFxuICAgICdiZWxsJyxcbiAgICAnYm9vaycsXG4gICAgJ2JveC1wbG90JyxcbiAgICAnYnVpbGQnLFxuICAgICdidWxiJyxcbiAgICAnY2FsY3VsYXRvcicsXG4gICAgJ2NhbWVyYScsXG4gICAgJ2NhbGVuZGFyJyxcbiAgICAnY2FyJyxcbiAgICAnY2FyZXQtZG93bicsXG4gICAgJ2NhcmV0LWxlZnQnLFxuICAgICdjYXJldC1yaWdodCcsXG4gICAgJ2NhcmV0LXVwJyxcbiAgICAnY2Fycnktb3V0JyxcbiAgICAnY2hlY2stY2lyY2xlJyxcbiAgICAnY2hlY2stc3F1YXJlJyxcbiAgICAnY2hyb21lJyxcbiAgICAnY2xvY2stY2lyY2xlJyxcbiAgICAnY2ktY2lyY2xlJyxcbiAgICAnY2xvc2UtY2lyY2xlJyxcbiAgICAnY2xvc2Utc3F1YXJlJyxcbiAgICAnY2xvdWQnLFxuICAgICdjb2RlLXNhbmRib3gtY2lyY2xlJyxcbiAgICAnY29kZS1zYW5kYm94LXNxdWFyZScsXG4gICAgJ2NvZGUnLFxuICAgICdjb2RlcGVuLWNpcmNsZScsXG4gICAgJ2NvZGVwZW4tc3F1YXJlJyxcbiAgICAnY29udGFpbmVyJyxcbiAgICAnY29udGFjdHMnLFxuICAgICdjb21wYXNzJyxcbiAgICAnY29udHJvbCcsXG4gICAgJ2NvcHknLFxuICAgICdjcmVkaXQtY2FyZCcsXG4gICAgJ2NvcHlyaWdodC1jaXJjbGUnLFxuICAgICdjcm93bicsXG4gICAgJ2N1c3RvbWVyLXNlcnZpY2UnLFxuICAgICdkYXNoYm9hcmQnLFxuICAgICdkYXRhYmFzZScsXG4gICAgJ2RlbGV0ZScsXG4gICAgJ2RpZmYnLFxuICAgICdkaW5ndGFsay1jaXJjbGUnLFxuICAgICdkaW5ndGFsay1zcXVhcmUnLFxuICAgICdkb2xsYXItY2lyY2xlJyxcbiAgICAnZGlzbGlrZScsXG4gICAgJ2Rvd24tY2lyY2xlJyxcbiAgICAnZHJpYmJibGUtY2lyY2xlJyxcbiAgICAnZG93bi1zcXVhcmUnLFxuICAgICdkcmliYmJsZS1zcXVhcmUnLFxuICAgICdkcm9wYm94LWNpcmNsZScsXG4gICAgJ2Ryb3Bib3gtc3F1YXJlJyxcbiAgICAnZWRpdCcsXG4gICAgJ2Vudmlyb25tZW50JyxcbiAgICAnZXhjbGFtYXRpb24tY2lyY2xlJyxcbiAgICAnZXVyby1jaXJjbGUnLFxuICAgICdleHBlcmltZW50JyxcbiAgICAnZXllJyxcbiAgICAnZmFjZWJvb2snLFxuICAgICdmYXN0LWJhY2t3YXJkJyxcbiAgICAnZmFzdC1mb3J3YXJkJyxcbiAgICAnZmlsZS1leGNlbCcsXG4gICAgJ2ZpbGUtYWRkJyxcbiAgICAnZmlsZS1leGNsYW1hdGlvbicsXG4gICAgJ2ZpbGUtaW1hZ2UnLFxuICAgICdmaWxlLXBwdCcsXG4gICAgJ2ZpbGUtcGRmJyxcbiAgICAnZmlsZS1tYXJrZG93bicsXG4gICAgJ2ZpbGUtdGV4dCcsXG4gICAgJ2ZpbGUtdW5rbm93bicsXG4gICAgJ2ZpbGUtemlwJyxcbiAgICAnZmlsZS13b3JkJyxcbiAgICAnZmlsZScsXG4gICAgJ2ZpcmUnLFxuICAgICdmbGFnJyxcbiAgICAnZmlsdGVyJyxcbiAgICAnZm9sZGVyLWFkZCcsXG4gICAgJ2ZvbGRlci1vcGVuJyxcbiAgICAnZm9yd2FyZCcsXG4gICAgJ2ZvbGRlcicsXG4gICAgJ2Zyb3duJyxcbiAgICAnZnVuZCcsXG4gICAgJ2Z1bm5lbC1wbG90JyxcbiAgICAnZ2lmdCcsXG4gICAgJ2dpdGh1YicsXG4gICAgJ2dpdGxhYicsXG4gICAgJ2dvbGRlbicsXG4gICAgJ2dvb2dsZS1jaXJjbGUnLFxuICAgICdnb29nbGUtcGx1cy1jaXJjbGUnLFxuICAgICdnb29nbGUtcGx1cy1zcXVhcmUnLFxuICAgICdnb29nbGUtc3F1YXJlJyxcbiAgICAnaGRkJyxcbiAgICAnaGlnaGxpZ2h0JyxcbiAgICAnaGVhcnQnLFxuICAgICdob21lJyxcbiAgICAnaG91cmdsYXNzJyxcbiAgICAnaWUtY2lyY2xlJyxcbiAgICAnaHRtbDUnLFxuICAgICdpZGNhcmQnLFxuICAgICdpZS1zcXVhcmUnLFxuICAgICdpbmZvLWNpcmNsZScsXG4gICAgJ2luc3RhZ3JhbScsXG4gICAgJ2luc3VyYW5jZScsXG4gICAgJ2ludGVyYXRpb24nLFxuICAgICdsYXlvdXQnLFxuICAgICdsZWZ0LXNxdWFyZScsXG4gICAgJ2xlZnQtY2lyY2xlJyxcbiAgICAnbGlua2VkaW4nLFxuICAgICdsaWtlJyxcbiAgICAnbG9jaycsXG4gICAgJ21haWwnLFxuICAgICdtZWRpY2luZS1ib3gnLFxuICAgICdtZWRpdW0tc3F1YXJlJyxcbiAgICAnbWVkaXVtLWNpcmNsZScsXG4gICAgJ21laCcsXG4gICAgJ21lc3NhZ2UnLFxuICAgICdtaW51cy1jaXJjbGUnLFxuICAgICdtaW51cy1zcXVhcmUnLFxuICAgICdtb2JpbGUnLFxuICAgICdtb25leS1jb2xsZWN0JyxcbiAgICAnbm90aWZpY2F0aW9uJyxcbiAgICAncGF1c2UtY2lyY2xlJyxcbiAgICAncGF5LWNpcmNsZScsXG4gICAgJ3Bob25lJyxcbiAgICAncGljdHVyZScsXG4gICAgJ3BpZS1jaGFydCcsXG4gICAgJ3BsYXktc3F1YXJlJyxcbiAgICAncGxheS1jaXJjbGUnLFxuICAgICdwbHVzLWNpcmNsZScsXG4gICAgJ3Byb2ZpbGUnLFxuICAgICdwbHVzLXNxdWFyZScsXG4gICAgJ3BvdW5kLWNpcmNsZScsXG4gICAgJ3ByaW50ZXInLFxuICAgICdwcm9qZWN0JyxcbiAgICAncXEtY2lyY2xlJyxcbiAgICAncHVzaHBpbicsXG4gICAgJ3Byb3BlcnR5LXNhZmV0eScsXG4gICAgJ3FxLXNxdWFyZScsXG4gICAgJ3JlYWQnLFxuICAgICdxdWVzdGlvbi1jaXJjbGUnLFxuICAgICdyZWNvbmNpbGlhdGlvbicsXG4gICAgJ3JlZC1lbnZlbG9wZScsXG4gICAgJ3JlZGRpdC1jaXJjbGUnLFxuICAgICdyZWRkaXQtc3F1YXJlJyxcbiAgICAncmVzdCcsXG4gICAgJ3JpZ2h0LWNpcmNsZScsXG4gICAgJ3JpZ2h0LXNxdWFyZScsXG4gICAgJ3JvY2tldCcsXG4gICAgJ3NhZmV0eS1jZXJ0aWZpY2F0ZScsXG4gICAgJ3NjaGVkdWxlJyxcbiAgICAnc2F2ZScsXG4gICAgJ3NlY3VyaXR5LXNjYW4nLFxuICAgICdzaG9wJyxcbiAgICAnc2V0dGluZycsXG4gICAgJ3Nob3BwaW5nJyxcbiAgICAnc2tldGNoLWNpcmNsZScsXG4gICAgJ3NrZXRjaC1zcXVhcmUnLFxuICAgICdza3lwZScsXG4gICAgJ3NraW4nLFxuICAgICdzbGFjay1jaXJjbGUnLFxuICAgICdzbGFjay1zcXVhcmUnLFxuICAgICdzbGlkZXJzJyxcbiAgICAnc21pbGUnLFxuICAgICdzbmlwcGV0cycsXG4gICAgJ3NvdW5kJyxcbiAgICAnc3RhcicsXG4gICAgJ3N0ZXAtYmFja3dhcmQnLFxuICAgICdzdGVwLWZvcndhcmQnLFxuICAgICdzdG9wJyxcbiAgICAnc3dpdGNoZXInLFxuICAgICd0YWJsZXQnLFxuICAgICd0YWcnLFxuICAgICd0YWdzJyxcbiAgICAndGFvYmFvLWNpcmNsZScsXG4gICAgJ3Rhb2Jhby1zcXVhcmUnLFxuICAgICd0aHVuZGVyYm9sdCcsXG4gICAgJ3Rvb2wnLFxuICAgICd0cmFkZW1hcmstY2lyY2xlJyxcbiAgICAndHJvcGh5JyxcbiAgICAndHdpdHRlci1jaXJjbGUnLFxuICAgICd0d2l0dGVyLXNxdWFyZScsXG4gICAgJ3VubG9jaycsXG4gICAgJ3VwLWNpcmNsZScsXG4gICAgJ3VwLXNxdWFyZScsXG4gICAgJ3VzYicsXG4gICAgJ3ZpZGVvLWNhbWVyYScsXG4gICAgJ3dhbGxldCcsXG4gICAgJ3dhcm5pbmcnLFxuICAgICd3ZWNoYXQnLFxuICAgICd3ZWliby1jaXJjbGUnLFxuICAgICd3ZWliby1zcXVhcmUnLFxuICAgICd3aW5kb3dzJyxcbiAgICAneWFob28nLFxuICAgICd5b3V0dWJlJyxcbiAgICAnemhpaHUtY2lyY2xlJyxcbiAgICAneXVxdWUnLFxuICAgICd6aGlodS1zcXVhcmUnXG4gIF0sXG4gIG91dGxpbmU6IFtcbiAgICAnYWNjb3VudC1ib29rJyxcbiAgICAnYWxlcnQnLFxuICAgICdhbGlwYXktY2lyY2xlJyxcbiAgICAnYWxpd2FuZ3dhbmcnLFxuICAgICdhcGknLFxuICAgICdhbmRyb2lkJyxcbiAgICAnYXBwbGUnLFxuICAgICdhcHBzdG9yZScsXG4gICAgJ2F1ZGlvJyxcbiAgICAnYmFja3dhcmQnLFxuICAgICdiYW5rJyxcbiAgICAnYmVoYW5jZS1zcXVhcmUnLFxuICAgICdiZWxsJyxcbiAgICAnYm9vaycsXG4gICAgJ2JveC1wbG90JyxcbiAgICAnYnVpbGQnLFxuICAgICdidWxiJyxcbiAgICAnY2FsY3VsYXRvcicsXG4gICAgJ2NhbWVyYScsXG4gICAgJ2NhbGVuZGFyJyxcbiAgICAnY2FyJyxcbiAgICAnY2FyZXQtZG93bicsXG4gICAgJ2NhcmV0LWxlZnQnLFxuICAgICdjYXJldC1yaWdodCcsXG4gICAgJ2NhcmV0LXVwJyxcbiAgICAnY2Fycnktb3V0JyxcbiAgICAnY2hlY2stY2lyY2xlJyxcbiAgICAnY2hlY2stc3F1YXJlJyxcbiAgICAnY2hyb21lJyxcbiAgICAnY2xvY2stY2lyY2xlJyxcbiAgICAnY2xvc2UtY2lyY2xlJyxcbiAgICAnY2xvc2Utc3F1YXJlJyxcbiAgICAnY2xvdWQnLFxuICAgICdjb2RlJyxcbiAgICAnY29kZXBlbi1jaXJjbGUnLFxuICAgICdjb250YWluZXInLFxuICAgICdjb250YWN0cycsXG4gICAgJ2NvbXBhc3MnLFxuICAgICdjb250cm9sJyxcbiAgICAnY29weScsXG4gICAgJ2NyZWRpdC1jYXJkJyxcbiAgICAnY3Jvd24nLFxuICAgICdjdXN0b21lci1zZXJ2aWNlJyxcbiAgICAnZGFzaGJvYXJkJyxcbiAgICAnZGF0YWJhc2UnLFxuICAgICdkZWxldGUnLFxuICAgICdkaWZmJyxcbiAgICAnZGlzbGlrZScsXG4gICAgJ2Rvd24tY2lyY2xlJyxcbiAgICAnZG93bi1zcXVhcmUnLFxuICAgICdkcmliYmJsZS1zcXVhcmUnLFxuICAgICdlZGl0JyxcbiAgICAnZW52aXJvbm1lbnQnLFxuICAgICdleGNsYW1hdGlvbi1jaXJjbGUnLFxuICAgICdleHBlcmltZW50JyxcbiAgICAnZXllJyxcbiAgICAnZmFjZWJvb2snLFxuICAgICdmYXN0LWJhY2t3YXJkJyxcbiAgICAnZmFzdC1mb3J3YXJkJyxcbiAgICAnZmlsZS1leGNlbCcsXG4gICAgJ2ZpbGUtYWRkJyxcbiAgICAnZmlsZS1leGNsYW1hdGlvbicsXG4gICAgJ2ZpbGUtaW1hZ2UnLFxuICAgICdmaWxlLXBwdCcsXG4gICAgJ2ZpbGUtcGRmJyxcbiAgICAnZmlsZS1tYXJrZG93bicsXG4gICAgJ2ZpbGUtdGV4dCcsXG4gICAgJ2ZpbGUtdW5rbm93bicsXG4gICAgJ2ZpbGUtemlwJyxcbiAgICAnZmlsZS13b3JkJyxcbiAgICAnZmlsZScsXG4gICAgJ2ZpcmUnLFxuICAgICdmbGFnJyxcbiAgICAnZmlsdGVyJyxcbiAgICAnZm9sZGVyLWFkZCcsXG4gICAgJ2ZvbGRlci1vcGVuJyxcbiAgICAnZm9yd2FyZCcsXG4gICAgJ2ZvbGRlcicsXG4gICAgJ2Zyb3duJyxcbiAgICAnZnVuZCcsXG4gICAgJ2Z1bm5lbC1wbG90JyxcbiAgICAnZ2lmdCcsXG4gICAgJ2dpdGh1YicsXG4gICAgJ2dpdGxhYicsXG4gICAgJ2hkZCcsXG4gICAgJ2hpZ2hsaWdodCcsXG4gICAgJ2hlYXJ0JyxcbiAgICAnaG9tZScsXG4gICAgJ2hvdXJnbGFzcycsXG4gICAgJ2h0bWw1JyxcbiAgICAnaWRjYXJkJyxcbiAgICAnaW5mby1jaXJjbGUnLFxuICAgICdpbnN0YWdyYW0nLFxuICAgICdpbnN1cmFuY2UnLFxuICAgICdpbnRlcmF0aW9uJyxcbiAgICAnbGF5b3V0JyxcbiAgICAnbGVmdC1zcXVhcmUnLFxuICAgICdsZWZ0LWNpcmNsZScsXG4gICAgJ2xpbmtlZGluJyxcbiAgICAnbGlrZScsXG4gICAgJ2xvY2snLFxuICAgICdtYWlsJyxcbiAgICAnbWVkaWNpbmUtYm94JyxcbiAgICAnbWVoJyxcbiAgICAnbWVzc2FnZScsXG4gICAgJ21pbnVzLWNpcmNsZScsXG4gICAgJ21pbnVzLXNxdWFyZScsXG4gICAgJ21vYmlsZScsXG4gICAgJ21vbmV5LWNvbGxlY3QnLFxuICAgICdub3RpZmljYXRpb24nLFxuICAgICdwYXVzZS1jaXJjbGUnLFxuICAgICdwYXktY2lyY2xlJyxcbiAgICAncGhvbmUnLFxuICAgICdwaWN0dXJlJyxcbiAgICAncGllLWNoYXJ0JyxcbiAgICAncGxheS1zcXVhcmUnLFxuICAgICdwbGF5LWNpcmNsZScsXG4gICAgJ3BsdXMtY2lyY2xlJyxcbiAgICAncHJvZmlsZScsXG4gICAgJ3BsdXMtc3F1YXJlJyxcbiAgICAncHJpbnRlcicsXG4gICAgJ3Byb2plY3QnLFxuICAgICdwdXNocGluJyxcbiAgICAncHJvcGVydHktc2FmZXR5JyxcbiAgICAncmVhZCcsXG4gICAgJ3F1ZXN0aW9uLWNpcmNsZScsXG4gICAgJ3JlY29uY2lsaWF0aW9uJyxcbiAgICAncmVkLWVudmVsb3BlJyxcbiAgICAncmVzdCcsXG4gICAgJ3JpZ2h0LWNpcmNsZScsXG4gICAgJ3JpZ2h0LXNxdWFyZScsXG4gICAgJ3JvY2tldCcsXG4gICAgJ3NhZmV0eS1jZXJ0aWZpY2F0ZScsXG4gICAgJ3NjaGVkdWxlJyxcbiAgICAnc2F2ZScsXG4gICAgJ3NlY3VyaXR5LXNjYW4nLFxuICAgICdzaG9wJyxcbiAgICAnc2V0dGluZycsXG4gICAgJ3Nob3BwaW5nJyxcbiAgICAnc2t5cGUnLFxuICAgICdza2luJyxcbiAgICAnc2xhY2stc3F1YXJlJyxcbiAgICAnc2xpZGVycycsXG4gICAgJ3NtaWxlJyxcbiAgICAnc25pcHBldHMnLFxuICAgICdzb3VuZCcsXG4gICAgJ3N0YXInLFxuICAgICdzdGVwLWJhY2t3YXJkJyxcbiAgICAnc3RlcC1mb3J3YXJkJyxcbiAgICAnc3RvcCcsXG4gICAgJ3N3aXRjaGVyJyxcbiAgICAndGFibGV0JyxcbiAgICAndGFnJyxcbiAgICAndGFncycsXG4gICAgJ3Rhb2Jhby1jaXJjbGUnLFxuICAgICd0aHVuZGVyYm9sdCcsXG4gICAgJ3Rvb2wnLFxuICAgICd0cm9waHknLFxuICAgICd1bmxvY2snLFxuICAgICd1cC1jaXJjbGUnLFxuICAgICd1cC1zcXVhcmUnLFxuICAgICd1c2InLFxuICAgICd2aWRlby1jYW1lcmEnLFxuICAgICd3YWxsZXQnLFxuICAgICd3YXJuaW5nJyxcbiAgICAnd2VjaGF0JyxcbiAgICAnd2VpYm8tY2lyY2xlJyxcbiAgICAnd2VpYm8tc3F1YXJlJyxcbiAgICAnd2luZG93cycsXG4gICAgJ3lhaG9vJyxcbiAgICAneW91dHViZScsXG4gICAgJ3l1cXVlJyxcbiAgICAnYWxpYmFiYScsXG4gICAgJ2FsaWduLWNlbnRlcicsXG4gICAgJ2FsaWduLWxlZnQnLFxuICAgICdhbGlnbi1yaWdodCcsXG4gICAgJ2FsaXBheScsXG4gICAgJ2FtYXpvbicsXG4gICAgJ2FsaXl1bicsXG4gICAgJ2FudC1jbG91ZCcsXG4gICAgJ2FudC1kZXNpZ24nLFxuICAgICdhcGFydG1lbnQnLFxuICAgICdhcmVhLWNoYXJ0JyxcbiAgICAnYXJyb3ctZG93bicsXG4gICAgJ2Fycm93LWxlZnQnLFxuICAgICdhcnJvdy1yaWdodCcsXG4gICAgJ2Fycm93LXVwJyxcbiAgICAnYXJyb3dzLWFsdCcsXG4gICAgJ2F1ZGl0JyxcbiAgICAnYmFyLWNoYXJ0JyxcbiAgICAnYmFyY29kZScsXG4gICAgJ2JhcnMnLFxuICAgICdiZWhhbmNlJyxcbiAgICAnYmxvY2snLFxuICAgICdiZy1jb2xvcnMnLFxuICAgICdib2xkJyxcbiAgICAnYm9yZGVyLWJvdHRvbScsXG4gICAgJ2JvcmRlci1ob3Jpem9udGFsJyxcbiAgICAnYm9yZGVyLWlubmVyJyxcbiAgICAnYm9yZGVyLWxlZnQnLFxuICAgICdib3JkZXItb3V0ZXInLFxuICAgICdib3JkZXItcmlnaHQnLFxuICAgICdib3JkZXItdmVydGljbGUnLFxuICAgICdib3JkZXItdG9wJyxcbiAgICAnYm9yZGVyJyxcbiAgICAnYnJhbmNoZXMnLFxuICAgICdjaGVjaycsXG4gICAgJ2NpJyxcbiAgICAnY2xvdWQtZG93bmxvYWQnLFxuICAgICdjbG9zZScsXG4gICAgJ2Nsb3VkLXNlcnZlcicsXG4gICAgJ2Nsb3VkLXN5bmMnLFxuICAgICdjbG91ZC11cGxvYWQnLFxuICAgICdjbHVzdGVyJyxcbiAgICAnY29kZS1zYW5kYm94JyxcbiAgICAnY29kZXBlbicsXG4gICAgJ2NvZmZlZScsXG4gICAgJ2NvbHVtLWhlaWdodCcsXG4gICAgJ2NvbHVtbi13aWR0aCcsXG4gICAgJ2NvcHlyaWdodCcsXG4gICAgJ2Rhc2gnLFxuICAgICdkZXBsb3ltZW50LXVuaXQnLFxuICAgICdkZXNrdG9wJyxcbiAgICAnZGlzY29ubmVjdCcsXG4gICAgJ2RpbmdkaW5nJyxcbiAgICAnZG9sbGFyJyxcbiAgICAnZG91YmxlLWxlZnQnLFxuICAgICdkb3QtY2hhcnQnLFxuICAgICdkb3VibGUtcmlnaHQnLFxuICAgICdkb3duJyxcbiAgICAnZG93bmxvYWQnLFxuICAgICdkcmFnJyxcbiAgICAnZHJpYmJibGUnLFxuICAgICdkcm9wYm94JyxcbiAgICAnZWxsaXBzaXMnLFxuICAgICdlbnRlcicsXG4gICAgJ2V1cm8nLFxuICAgICdleGNlcHRpb24nLFxuICAgICdleGNsYW1hdGlvbicsXG4gICAgJ2V4cG9ydCcsXG4gICAgJ2ZhbGwnLFxuICAgICdmaWxlLWRvbmUnLFxuICAgICdmaWxlLWpwZycsXG4gICAgJ2ZpbGUtcHJvdGVjdCcsXG4gICAgJ2ZpbGUtc2VhcmNoJyxcbiAgICAnZmlsZS1zeW5jJyxcbiAgICAnZm9udC1jb2xvcnMnLFxuICAgICdmb250LXNpemUnLFxuICAgICdmb3JrJyxcbiAgICAnZm9ybScsXG4gICAgJ2Z1bGxzY3JlZW4tZXhpdCcsXG4gICAgJ2Z1bGxzY3JlZW4nLFxuICAgICdnYXRld2F5JyxcbiAgICAnZ2xvYmFsJyxcbiAgICAnZ29sZCcsXG4gICAgJ2dvb2dsZS1wbHVzJyxcbiAgICAnZ29vZ2xlJyxcbiAgICAnaGVhdC1tYXAnLFxuICAgICdpZScsXG4gICAgJ2ltcG9ydCcsXG4gICAgJ2luYm94JyxcbiAgICAnaW5mbycsXG4gICAgJ2l0YWxpYycsXG4gICAgJ2lzc3Vlcy1jbG9zZScsXG4gICAgJ2tleScsXG4gICAgJ2xhcHRvcCcsXG4gICAgJ2xlZnQnLFxuICAgICdsaW5lLWNoYXJ0JyxcbiAgICAnbGluZS1oZWlnaHQnLFxuICAgICdsaW5lJyxcbiAgICAnbGluaycsXG4gICAgJ2xvYWRpbmctMy1xdWFydGVycycsXG4gICAgJ2xvYWRpbmcnLFxuICAgICdsb2dpbicsXG4gICAgJ2xvZ291dCcsXG4gICAgJ21hbicsXG4gICAgJ21lZGl1bS13b3JrbWFyaycsXG4gICAgJ21lZGl1bScsXG4gICAgJ21lbnUtZm9sZCcsXG4gICAgJ21lbnUnLFxuICAgICdtZW51LXVuZm9sZCcsXG4gICAgJ21pbnVzJyxcbiAgICAnbW9uaXRvcicsXG4gICAgJ21yJyxcbiAgICAnbnVtYmVyJyxcbiAgICAnb3JkZXJlZC1saXN0JyxcbiAgICAncGFwZXItY2xpcCcsXG4gICAgJ3BhdXNlJyxcbiAgICAncGVyY2VudGFnZScsXG4gICAgJ3BpYy1jZW50ZXInLFxuICAgICdwaWMtbGVmdCcsXG4gICAgJ3BpYy1yaWdodCcsXG4gICAgJ3BsdXMnLFxuICAgICdwb3VuZCcsXG4gICAgJ3Bvd2Vyb2ZmJyxcbiAgICAncXEnLFxuICAgICdxcmNvZGUnLFxuICAgICdxdWVzdGlvbicsXG4gICAgJ3JhZGFyLWNoYXJ0JyxcbiAgICAncmFkaXVzLWJvdHRvbWxlZnQnLFxuICAgICdyYWRpdXMtYm90dG9tcmlnaHQnLFxuICAgICdyYWRpdXMtc2V0dGluZycsXG4gICAgJ3JhZGl1cy11cGxlZnQnLFxuICAgICdyYWRpdXMtdXByaWdodCcsXG4gICAgJ3JlZGRpdCcsXG4gICAgJ3JlZG8nLFxuICAgICdyZWxvYWQtdGltZScsXG4gICAgJ3JlbG9hZCcsXG4gICAgJ3JldHdlZXQnLFxuICAgICdyaWdodCcsXG4gICAgJ3Jpc2UnLFxuICAgICdyb2JvdCcsXG4gICAgJ3JvbGxiYWNrJyxcbiAgICAnc2FmZXR5JyxcbiAgICAnc2NhbicsXG4gICAgJ3NjaXNzb3InLFxuICAgICdzZWFyY2gnLFxuICAgICdzZWxlY3QnLFxuICAgICdzaGFrZScsXG4gICAgJ3NoYXJlLWFsdCcsXG4gICAgJ3Nob3BwaW5nLWNhcnQnLFxuICAgICdzaHJpbmsnLFxuICAgICdza2V0Y2gnLFxuICAgICdzbGFjaycsXG4gICAgJ3NtYWxsLWRhc2gnLFxuICAgICdzb2x1dGlvbicsXG4gICAgJ3NvcnQtYXNjZW5kaW5nJyxcbiAgICAnc29ydC1kZXNjZW5kaW5nJyxcbiAgICAnc3RvY2snLFxuICAgICdzdHJpa2V0aHJvdWdoJyxcbiAgICAnc3dhcC1sZWZ0JyxcbiAgICAnc3dhcC1yaWdodCcsXG4gICAgJ3N3YXAnLFxuICAgICdzeW5jJyxcbiAgICAndGFibGUnLFxuICAgICd0ZWFtJyxcbiAgICAndGFvYmFvJyxcbiAgICAndG8tdG9wJyxcbiAgICAndHJhZGVtYXJrJyxcbiAgICAndHJhbnNhY3Rpb24nLFxuICAgICd0d2l0dGVyJyxcbiAgICAndW5kZXJsaW5lJyxcbiAgICAndW5kbycsXG4gICAgJ3Vub3JkZXJlZC1saXN0JyxcbiAgICAndXAnLFxuICAgICd1cGxvYWQnLFxuICAgICd1c2VyLWRlbGV0ZScsXG4gICAgJ3VzZXItYWRkJyxcbiAgICAndXNlcmdyb3VwLWFkZCcsXG4gICAgJ3VzZXInLFxuICAgICd1c2VyZ3JvdXAtZGVsZXRlJyxcbiAgICAndmVydGljYWwtYWxpZ24tYm90dG9tJyxcbiAgICAndmVydGljYWwtYWxpZ24tbWlkZGxlJyxcbiAgICAndmVydGljYWwtYWxpZ24tdG9wJyxcbiAgICAndmVydGljYWwtbGVmdCcsXG4gICAgJ3ZlcnRpY2FsLXJpZ2h0JyxcbiAgICAnd2VpYm8nLFxuICAgICd3aWZpJyxcbiAgICAnd29tYW4nLFxuICAgICd6b29tLWluJyxcbiAgICAnemhpaHUnLFxuICAgICd6b29tLW91dCdcbiAgXSxcbiAgdHdvdG9uZTogW1xuICAgICdhY2NvdW50LWJvb2snLFxuICAgICdhbGVydCcsXG4gICAgJ2FwaScsXG4gICAgJ2FwcHN0b3JlJyxcbiAgICAnYXVkaW8nLFxuICAgICdiYW5rJyxcbiAgICAnYmVsbCcsXG4gICAgJ2Jvb2snLFxuICAgICdib3gtcGxvdCcsXG4gICAgJ2J1aWxkJyxcbiAgICAnYnVsYicsXG4gICAgJ2NhbGN1bGF0b3InLFxuICAgICdjYW1lcmEnLFxuICAgICdjYXInLFxuICAgICdjYXJyeS1vdXQnLFxuICAgICdjaGVjay1jaXJjbGUnLFxuICAgICdjaGVjay1zcXVhcmUnLFxuICAgICdjbG9jay1jaXJjbGUnLFxuICAgICdjbG9zZS1jaXJjbGUnLFxuICAgICdjbG9zZS1zcXVhcmUnLFxuICAgICdjbG91ZCcsXG4gICAgJ2NvZGUnLFxuICAgICdjb250YWluZXInLFxuICAgICdjb250YWN0cycsXG4gICAgJ2NvbXBhc3MnLFxuICAgICdjb250cm9sJyxcbiAgICAnY29weScsXG4gICAgJ2NyZWRpdC1jYXJkJyxcbiAgICAnY3Jvd24nLFxuICAgICdjdXN0b21lci1zZXJ2aWNlJyxcbiAgICAnZGFzaGJvYXJkJyxcbiAgICAnZGF0YWJhc2UnLFxuICAgICdkZWxldGUnLFxuICAgICdkaWZmJyxcbiAgICAnZGlzbGlrZScsXG4gICAgJ2Rvd24tY2lyY2xlJyxcbiAgICAnZG93bi1zcXVhcmUnLFxuICAgICdlZGl0JyxcbiAgICAnZW52aXJvbm1lbnQnLFxuICAgICdleGNsYW1hdGlvbi1jaXJjbGUnLFxuICAgICdleHBlcmltZW50JyxcbiAgICAnZXllJyxcbiAgICAnZmlsZS1leGNlbCcsXG4gICAgJ2ZpbGUtYWRkJyxcbiAgICAnZmlsZS1leGNsYW1hdGlvbicsXG4gICAgJ2ZpbGUtaW1hZ2UnLFxuICAgICdmaWxlLXBwdCcsXG4gICAgJ2ZpbGUtcGRmJyxcbiAgICAnZmlsZS1tYXJrZG93bicsXG4gICAgJ2ZpbGUtdGV4dCcsXG4gICAgJ2ZpbGUtdW5rbm93bicsXG4gICAgJ2ZpbGUtemlwJyxcbiAgICAnZmlsZS13b3JkJyxcbiAgICAnZmlsZScsXG4gICAgJ2ZpcmUnLFxuICAgICdmbGFnJyxcbiAgICAnZmlsdGVyJyxcbiAgICAnZm9sZGVyLWFkZCcsXG4gICAgJ2ZvbGRlci1vcGVuJyxcbiAgICAnZm9sZGVyJyxcbiAgICAnZnJvd24nLFxuICAgICdmdW5kJyxcbiAgICAnZnVubmVsLXBsb3QnLFxuICAgICdnaWZ0JyxcbiAgICAnaGRkJyxcbiAgICAnaGlnaGxpZ2h0JyxcbiAgICAnaGVhcnQnLFxuICAgICdob21lJyxcbiAgICAnaG91cmdsYXNzJyxcbiAgICAnaHRtbDUnLFxuICAgICdpZGNhcmQnLFxuICAgICdpbmZvLWNpcmNsZScsXG4gICAgJ2luc3VyYW5jZScsXG4gICAgJ2ludGVyYXRpb24nLFxuICAgICdsYXlvdXQnLFxuICAgICdsZWZ0LXNxdWFyZScsXG4gICAgJ2xlZnQtY2lyY2xlJyxcbiAgICAnbGlrZScsXG4gICAgJ2xvY2snLFxuICAgICdtYWlsJyxcbiAgICAnbWVkaWNpbmUtYm94JyxcbiAgICAnbWVoJyxcbiAgICAnbWVzc2FnZScsXG4gICAgJ21pbnVzLWNpcmNsZScsXG4gICAgJ21pbnVzLXNxdWFyZScsXG4gICAgJ21vYmlsZScsXG4gICAgJ21vbmV5LWNvbGxlY3QnLFxuICAgICdub3RpZmljYXRpb24nLFxuICAgICdwYXVzZS1jaXJjbGUnLFxuICAgICdwaG9uZScsXG4gICAgJ3BpY3R1cmUnLFxuICAgICdwaWUtY2hhcnQnLFxuICAgICdwbGF5LXNxdWFyZScsXG4gICAgJ3BsYXktY2lyY2xlJyxcbiAgICAncGx1cy1jaXJjbGUnLFxuICAgICdwcm9maWxlJyxcbiAgICAncGx1cy1zcXVhcmUnLFxuICAgICdwb3VuZC1jaXJjbGUnLFxuICAgICdwcmludGVyJyxcbiAgICAncHJvamVjdCcsXG4gICAgJ3B1c2hwaW4nLFxuICAgICdwcm9wZXJ0eS1zYWZldHknLFxuICAgICdxdWVzdGlvbi1jaXJjbGUnLFxuICAgICdyZWNvbmNpbGlhdGlvbicsXG4gICAgJ3JlZC1lbnZlbG9wZScsXG4gICAgJ3Jlc3QnLFxuICAgICdyaWdodC1jaXJjbGUnLFxuICAgICdyaWdodC1zcXVhcmUnLFxuICAgICdyb2NrZXQnLFxuICAgICdzYWZldHktY2VydGlmaWNhdGUnLFxuICAgICdzY2hlZHVsZScsXG4gICAgJ3NhdmUnLFxuICAgICdzZWN1cml0eS1zY2FuJyxcbiAgICAnc2hvcCcsXG4gICAgJ3NldHRpbmcnLFxuICAgICdzaG9wcGluZycsXG4gICAgJ3NraW4nLFxuICAgICdzbGlkZXJzJyxcbiAgICAnc21pbGUnLFxuICAgICdzbmlwcGV0cycsXG4gICAgJ3NvdW5kJyxcbiAgICAnc3RhcicsXG4gICAgJ3N0b3AnLFxuICAgICdzd2l0Y2hlcicsXG4gICAgJ3RhYmxldCcsXG4gICAgJ3RhZycsXG4gICAgJ3RhZ3MnLFxuICAgICd0aHVuZGVyYm9sdCcsXG4gICAgJ3Rvb2wnLFxuICAgICd0cmFkZW1hcmstY2lyY2xlJyxcbiAgICAndHJvcGh5JyxcbiAgICAndW5sb2NrJyxcbiAgICAndXAtY2lyY2xlJyxcbiAgICAndXAtc3F1YXJlJyxcbiAgICAndXNiJyxcbiAgICAndmlkZW8tY2FtZXJhJyxcbiAgICAnd2FsbGV0JyxcbiAgICAnd2FybmluZycsXG4gICAgJ2NpJyxcbiAgICAnY29weXJpZ2h0JyxcbiAgICAnZG9sbGFyJyxcbiAgICAnZXVybycsXG4gICAgJ2dvbGQnLFxuICAgICdjYW5sZW5kYXInXG4gIF1cbn07XG4iXSwibmFtZXMiOlsiZ2VuZXJhdGVDb2xvciIsIkh0dHBDbGllbnQiLCJvYnNlcnZhYmxlT2YiLCJzaGFyZSIsInRhcCIsIm1hcCIsImNhdGNoRXJyb3IiLCJSZW5kZXJlckZhY3RvcnkyIiwiSHR0cEJhY2tlbmQiLCJPcHRpb25hbCIsIkluamVjdCIsIkRPQ1VNRU5UIiwiRGlyZWN0aXZlIiwiRWxlbWVudFJlZiIsIlJlbmRlcmVyMiIsIklucHV0IiwiTmdNb2R1bGUiLCJDb21tb25Nb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBZU8sSUFBSSxRQUFRLEdBQUc7UUFDbEIsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUM7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